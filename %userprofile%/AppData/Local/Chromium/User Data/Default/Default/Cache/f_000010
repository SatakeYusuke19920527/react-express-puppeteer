
<!DOCTYPE html>
<html>
<head id="Head1"><meta http-equiv="X-UA-Compatible" content="IE=edge"><title>
	BOM Editor
</title>
    <style type="text/css">
    html, body {
	    height: 100%;
	    overflow: auto;
    }
    body {
	    padding: 0;
	    margin: 0;
    }
    </style>

    <script type="text/javascript" src="Scripts/jquery-1.7.1.min.js" ></script>
    <script type="text/javascript" src="Silverlight.js?v=9.6.28"></script>
    <script type="text/javascript" src="cngetautonoFromBom.js?v=9.6.28"></script>
    <script type="text/javascript" src="FullWeb.js?v=9.6.28"></script>
    <script type="text/javascript" src="cnbom.js?v=9.6.28"></script>
    <script type="text/javascript" src="ExCmdBom.js?v=9.6.28"></script>
    <script type="text/javascript">
        var _fww = true;
        var normalEnd = false;
    	var normalStart = false;
        var nodepath = "";
        var m_socket = null;
        var m_currentClientSockId;
        var m_startupParam = null;

    	function SetUrl(url) {
    	}
    	// 正常終了かどうかのフラグ設定    	
    	function markNormalEnd() {
    		normalEnd = true;
    	}
    	function markNormalStart() {
    		normalStart = true;
    	}
        function startupCnBomEditor() {
            $(function () {
                var startUrlProtocol = false;
                var params = cnfw_parseParam();
                if (params['cw'] && params['cw'] != '') {
                    //  BOM Editorからの起動
                    var userAgent = window.navigator.userAgent.toLowerCase();
                    if (userAgent.indexOf('msie') >= 0 || userAgent.indexOf('trident') >= 0) {
                        //  IEからならURLプロトコル起動
                        startUrlProtocol = true;
                    }
                } else {
                    //  メイン画面からなのでURLプロトコル起動
                    startUrlProtocol = true
                }

                m_startupParam = null;
                var node = document.getElementById("startUpCnBom");
                if (startUrlProtocol) {
                    node.click();
                } else {
                    //websocket経由でBOM起動
                    var url = window.parent.location.pathname.toLowerCase();
                    m_startupParam = "StartupBomCmd('" + params['cw'] + "');";//    後でメッセージ送る
                }
                InitPage();
                setTimeout(initWebSocket, 1);
            });
        }
        //  BOM EditorからBOM Editor起動
        function StartupBomCmd(cw) {
            var bp = new WSBomParam("command", cw);
            bp.setCmd('StartupBom');
            var node = document.getElementById("startUpCnBom");
            var params = node.getAttribute("href");
            bp.addParam(params);
            sendMsgToBom(bp);
        }
        //  websocketを使ってBOM用画面準備できたことを通知
        function initWebSocket() {
            //  window.parent.parentはdefault.aspxもしくはfile.aspx
            $(window.parent.parent.document).ready(function () {
                try {
                    var url = window.parent.location.pathname.toLowerCase();
                    if (url.lastIndexOf("filedisp.aspx") >= 0) {
                        var mainWin = getMainWin(window.parent);
                        if (mainWin) {
                            //  default.aspxからsocketもらう
                            m_socket = mainWin.getWebSocketObj();
                        } else {
                            //  リンク起動のようなので自分で作る
                            $("#p_needRegistSockId").val("true");
                            createOwnWebSocket();
                            return;
                        }
                    } else if (!window.parent.parent.getWebSocketObj) {
                        //  ないと思うが一応
                        return;
                    } else {
                        m_socket = window.parent.parent.getWebSocketObj();
                    }
                    defineOnMessage();

                } catch (ex) {
                    console.log(ex.message);
                }
            });
        }
        function defineOnMessage() {
            m_socket.onmessage = function (msg) {
                console.log("msg " + msg.data)
                var d = msg.data.replace(/\0.*$/g, '');
                var bp = JSON.parse(d);
                if (bp.cmd == "logout") {
                    m_socket.close();
                    return;
                }
                m_currentClientSockId = bp.srcSockId;
                eval(bp.cmd);
            };
            setTimeout(registSockid, 1);
        }
        function registSockid() {
            try {
                var sockid = $("#p_browserSockid").val();
                if (sockid == "") {
                    console.log("sockid empty")
                    m_startupParam = null;
                    return;
                }
                if ($("#p_needRegistSockId").val() == "true") {
                    var bp = new WSBomParam("regist", sockid);
                    sendMsgToBom(bp);
                }
                if (m_startupParam) {
                    var sp = m_startupParam;
                    m_startupParam = null;
                    //  callback
                    eval(sp);
                }

                if ($("#p_restarthref").val() == "") {
                    return;
                }
                //  編集再開の続き
                window.location.href = $("#p_restarthref").val();
            } catch (e) {
                alert(e);
            }
        }
        //  CnBomHandler.ashxにJSONデータを送信する。
        function sendMsgToBom(bomParam) {
            try {
                var msg = JSON.stringify(bomParam);
                console.log("jsstr:" + msg);
                m_socket.send(msg);
            } catch (e) {
                console.log(e.message);
            }
        }
        //  default.aspxを見つける
        function getMainWin(pw) {
            try {
                for (var i = 0; i < 30; i++) {  //30個以上はWindow遡らないだろうという意味で
                    if (pw == null) {
                        return null;
                    }
                    if (pw._fww == undefined)    //  FullWEBのウィンドウかどうかを確認
                        return null;

                    var url = pw.location.pathname.toLowerCase();
                    if (url.lastIndexOf("default.aspx") > 0) return pw;//見つかった

                    if (url.lastIndexOf("filedisp.aspx") > 0)
                        pw = pw.top;
                    else if (url.lastIndexOf("filelist.aspx") > 0)
                        pw = pw.top;
                    else
                        pw = pw.opener;
                }

            } catch (e) {
                console.log(e.message);
                return null;
            }
        }
        //  bom.aspx内でWebSocket作成
        function createOwnWebSocket() {
            var host = window.location.hostname;
            var port = window.location.port;
            var path = window.location.pathname.replace("bom.aspx", "CnBomHandler.ashx");
            var wsprotcl = "ws://";
            var protcl = location.protocol;
            if (protcl == 'https:') {
                wsprotcl = "wss://";
            }
            var wsurl = "";
            if (port == "") {
                wsurl = wsprotcl + host + path;
            } else {
                wsurl = wsprotcl + host + ":" + port + path;
            }

            m_socket = new WebSocket(wsurl);

            m_socket.onopen = function () {
                console.log("onopen");
                defineOnMessage();
            };
            m_socket.onclose = function () {
                console.log("onclose");
            };
        }
        //  直前に起動した画面を前面に
        function setForeground(clientSockId, title, pathname) {
            try {
                if (clientSockId == "") {
                    return;
                }
                var userAgent = window.navigator.userAgent.toLowerCase();
                userAgent = userAgent.replace(",", "\\,");
                var bp = new WSBomParam("command", clientSockId);
                bp.setCmd("SetForeground");
                bp.addParam(userAgent);
                bp.addParam(title);
                bp.addParam(pathname);
                sendMsgToBom(bp);
            } catch (e) {
                console.log(e.message)
            }
        }
        //  各WebSocketにログアウトのメッセージを送る
        function sendLogoutToBomEditor(websockIds) {
            var ids = websockIds.split(",");
            for (i = 0; i < ids.length; i++) {
                try {
                    var bp = new WSBomParam("command", ids[i]);
                    bp.cmd = "logout";
                    sendMsgToBom(bp);
                } catch (e) {
                    console.log(e.message);
                }
            }
        }
        function getCurrentClientSockId(holdVal) {
            var ret = m_currentClientSockId;
            if (holdVal) return ret;

            m_currentClientSockId = "";//   ここでクリアして２度使いされないように
            return ret;
        }

        function HandleLoad() {
    		InitPage();
    	}
    	//コンピュータ名の取得
    	function getComputerName() {
    		var name = document.getElementById("SSS").computername;
    		return name;
    	}
    	function logMessage(message) {
    	}
    	function initLog() {
    	}
    </script>
    <script type="text/javascript">
    <!--
    	var selRow;
    	var colorEdit = "#fcc";
    	var cFid = 0;
    	var cOrg = 1;
    	var cFile = 5;
    	var workcaller;
    	var coinfo_win;

    	//  初期化
    	function init() {
    	    //var trs = document.getElementById("grid").getElementsByTagName("tr");
    	    //if (trs.length > 1) {
    	    //	selRow = trs[1];
    	    //}
    	    if (document.getElementById("SSS") != undefined) {
    	        document.getElementById("SSS").bcolor = 0xf9e4d3;
    	        document.getElementById("SSS").pcolor = 0xf9e4d3;
            }
    	}
    	
    	//  OK
    	function OnOkClick() {
    		var trs = document.getElementById("grid").getElementsByTagName("tr");
    		for (var n = 1; n < trs.length; n++) {
    			var tds = trs[n].getElementsByTagName("td");
    			if (tds[cFile].style.backgroundColor == "") continue;
    			var fid = tds[cFid].innerText;
    			var cur = tds[cFile].abbr;
    			alert("変更あり");
    		}

    		window.close();
    	}

    	//  キャンセル
    	function OnCancelClick() {
    		window.close();
    	}

    	//  割当解除
    	function OnDetachClick() {
    		var tds = selRow.getElementsByTagName("td");
    		if (tds[cFile].innerText == "") return;

    		if (tds[cFile].style.backgroundColor == "") {
    			tds[cFile].innerText = "";
    			SetEditFlag(tds[cFile], true);
    		} else {
    			tds[cFile].innerText = tds[cOrg].innerText;
    			SetEditFlag(tds[cFile], false);
    		}
    	}

    	//  キー処理
    	function KeyEv() {
    		switch (window.event.keyCode) {
    			case 13:    //  Enter
    				OnOkClick();
    				break;
    			case 27: //	ESC
    				OnCancelClick();
    				break;
    			default:
    		}
    	}

    	//  編集色の設定/解除
    	function SetEditFlag(td, flag) {
    		switch (flag) {
    			case true:
    				td.style.backgroundColor = colorEdit;
    				break;
    			case false:
    				td.style.backgroundColor = "";
    				break;
    		}
    	}

    	//  ファイル割り当て
    	function SetFile(fullpath, fname) {
    		var tds = selRow.getElementsByTagName("td");
    		tds[cFile].innerText = fname;
    		tds[cFile].abbr = fullpath;
    		SetEditFlag(tds[cFile], true);
    	}

    	//  ログ出力
    	function AddErrLog(msg) {
    		var log = document.getElementById("log");
    		var now = new Date();
    		log.innerText = now.toLocaleTimeString() + " " + msg + "\n" + log.innerText;
    	}

    	function UpdateMessage(msg) {
    		if (document.getElementById("SSS") != undefined) {
    			document.getElementById("SSS").fcolor = 0x111111;
    			document.getElementById("SSS").centerStr = msg;
    		}
    		window.status = msg;
    	}
    	function XYZ() {
    		event.srcElement.bcolor = 0x00d7ff;
    		event.returnValue = false;
    		event.dataTransfer.dropEffect = "copy";
    		setTimeout("resumeColor()", 2000);
    	}
    	function SendKey(keycode) {
    		if (document.getElementById("SSS") != undefined) {
    			document.getElementById("SSS").SendKey(keycode);
    		}
    	}
    	function resumeColor() {
    		document.getElementById("SSS").bcolor = 0xf9e4d3;
    	}

        function SelectedFileOp(op, fids) {
            var d = null;
            var mainWin = getMainWin(window.parent);
            if (mainWin != null) {
                d = mainWin.frames["work"].document;
            }
    		if (d == null) {
    			return;
            }
    		cancelEv();
    		d.getElementById("p_op").value = op;
            d.getElementById("p_args").value = fids
            d.getElementById("p_frombom").value = "true";
    		d.getElementById("frm").submit();
        }

        //チェックアウト取り消し処理
    	function CancelCheckOut(fids, strSelFname) {
    	    var title = "チェックアウト取り消しの確認";
    	    var msgConfirmCancelCOMulti = "これらの$1個のファイルのチェックアウトを取り消してもよろしいですか？";
    		var msgConfirmCancelCO = "'$1'のチェックアウトを取り消してもよろしいですか？";
    		var n = fids.toString().split(',').length;
    		if (n == 0) {
    			return true;
    		} else if (n == 1) {
    			msg = msgConfirmCancelCO.replace("$1", strSelFname);    //"\"" + strSelFname + "\"のチェックアウトを取り消してもよろしいですか？"
    		} else {
    			msg = msgConfirmCancelCOMulti.replace("$1", n);         //"これらの" + n + "個のファイルのチェックアウトを取り消してもよろしいですか？"
            }
            var mainWin = getMainWin();
            showCnMessageWindow("D200", { 'title': title, 'message': msg , 'type':'confirm'}, null, DoCancelCheckOut, mainWin);
        }
        function DoCancelCheckOut() {
            SelectedFileOp("CancelCheckOut", 'SelectedFiles');
        }
        function ShowCnDialog(winid, args, options, callbackFunc) {
            try {
                setForeground(getCurrentClientSockId(), parent.parent.document.title, parent.parent.location.pathname);//default.aspxをforeground
            } catch (e) {
                console.log(e.message);
            }
            parent.ShowCnDialog(winid, args, options, callbackFunc);
        }
        function UploadDoneProc(davpath, fid) {
            var dav = document.getElementById("dav");
            CallCnBomEditor("FileUploadDone", dav.value + davpath, fid);
        }
        function UploadErrorProc(errMsg) {
        	CallCnBomEditor("FileUploadError", errMsg);
        }

        //  dd3 準備完了 (work.aspx から呼ばれる。default.aspx との互換性のために関数を用意)
        function OnDD3Ready() {
        }

        //  work.aspx の参照を返す
        function GetWorkFrameWindow() {
            return frames["work"];
        }
        //  展開ノードのパスを取得する
        function getNodePath() {
            return $('#p_nodepath').val();
        }
        function setNodePath(path) {
            $('#p_nodepath').val(path);
        }
        function cnfw_OpenFiles(fid, pw, type, ftype) {
            parent.cnfw_OpenFiles(fid, parent, type, ftype);
        }
        //	gridのデータをjson形式（配列の配列）で返す
        //行の定義
        //1行目(index=0)の1列目にデータ開始行インデックス（今回の仕様では「5」） 
        //2行目はaaidの一覧 
        //3行目は「ラベル名\項目名」の一覧 
        //4行目はデータ型の一覧 
        //5行目は書式の一覧 
        //6行目以降はセルのValue値 
        //列の定義（6行目以降）
        //1列目はpsid（特定できない場合は 0。今回のカスタマイズでも 0 となる。） 
        //2列目はpfid（特定できない場合は 0） 
        //3列目はfid 
        //4列目はmid 
        //5列目はBOM の nodeType値 
        //6列目以降がグリッドの1列目以降に対応 
        function GetBomData() {
            var json = CallCnBomEditor("GetBomData");
            return json;
        }
    //-->
    </script>
</head>
<body id="BBB" oncontextmenu="return false" ondragenter="DDD_cancel();" ondragover="DDD_cancel();" onkeydown="KeyEv();">
    <form name="form1" method="post" action="./bom.aspx?skip=true" id="form1" style="height:100%">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="JGeqhbx9bP8peeMEq0VfyJYX9f60oR6kLimYhm9IBRjSS4SUcZl1b8P+Iqb9Rfz+LQ8eVhjJLqoUrDKjAACM5lzuHY8yW/+ub4hMavjZF0J6KspulIIXOyuw+u8MNds6Pttgw7TZQoFkHw5L/Kroydj8F+q1EyQeVqNo4NGTjbSVu09vJl0iyf2T9PBoWXFOtVtlsNxbwM6DmYFdvSp9ng==" />

<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="0EA755BE" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="X26QzMVO9Zc5+Vx0O4wrh1MzE15ep0rsNsz56yMM4bNN3mtscLVsJSfLaa2GNxNdpSZWw3m4cPJdPoIclTfqxYZ8D+EWtRubksbHLaIAH/oCCgwnGpwYn4TgVMYiOfOqzxSzVs023Xbq+Va8ZtNAjp7eDWaBQ83E3wpH8Ro11ap5umb8rexIzIkl6I2G65ZtHVhYNfNqq/nySifBkoa363Wm0N+EijrkrEZkNvfJyvsFSAqHDWWQ6vI/RlGsA6+pTVIpTkJWhRggu5SbUi1sasC/Hun5XFV2DbXeC0mwam3lorqET0/zwUPN0fQUXThb" />
		<input name="cnBomLogLevel" type="hidden" id="cnBomLogLevel" value="1" />
		<input name="ErrorMsg" type="hidden" id="ErrorMsg" />
		<script type="text/javascript">
			var logWindow;
			if (parseInt(document.getElementById("cnBomLogLevel").value) >= 4) {
				logWindow = window.open("bomLog.aspx", "logWindow");
			}
			var emsg = document.getElementById("ErrorMsg").value;
			if (emsg.length > 0) {
				alert(emsg);
				window.close();
			}
		</script>

		<span id="DD3"></span>
		<div style="display:none;">
        <a href="cnbom:" id="startUpCnBom">cnbom</a>
        <iframe src="work.aspx" name="work" id="work"></iframe>
		<input name="dav" type="hidden" id="dav" />
		<input name="isAutonowinActive" type="hidden" id="isAutonowinActive" />
		</div>
        <input name="p_nodepath" type="hidden" id="p_nodepath" />
        <input type="hidden" id="p_workmsg" value="" />
        <input name="p_browserSockid" type="hidden" id="p_browserSockid" />
        <input name="p_clientSockid" type="hidden" id="p_clientSockid" />
        <input name="p_wsurl" type="hidden" id="p_wsurl" />
        <input name="p_restarthref" type="hidden" id="p_restarthref" />
        <input name="p_needRegistSockId" type="hidden" id="p_needRegistSockId" />
    

<script type="text/javascript">
<!--
initWebSocket()// -->
</script>
</form>
</body>
</html>
