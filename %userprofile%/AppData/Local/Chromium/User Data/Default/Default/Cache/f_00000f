/// <reference path="Scripts/jquery-1.4.1.min.js" />

var nFiles = 0;
var strResult;
var nSelIndex;
var nSelFid;
var strSelFname;
var ViewMode = 0;
var gn = "fgResult";
var iv = "ivframe";
var appwin;
var bChildWinLoaded;
var lnk_a = new Array();
var lnk_type;
var sendwork_a = new Array();
var fida = new Array();		//承認依頼ウィンドウからアクセスされる配列

var namea = new Array();	//承認依頼ウィンドウからアクセスされる配列

var fidstr;	//承認用
var nameErrorShow;		// ファイル名変更用
var g_gdobj;
var g_gddrag;
var g_gdrows;
var g_gdpretr = 0;
var g_gdsortcol = 2;
var g_gdmode = "asc";
var g_gdoffset = 0;
var listcolbg = "#3D80DF";
var listcolfont = "#FFF";
var dd3bcolor = "#d3e4f9";// 0xf9e4d3;
var dd3pcolor = "#d3e4f9";// 0xf9e4d3;
var dd3acolor = "#bcf9d3";// 0xd3f9bc;
var m_selectedall = false;
var m_linkwintimerId;
var m_dblclickcmd = "mnuFile-Property";
var m_lastUpDownKey = 0;
var m_grid;
var m_openeditbom = false;
var m_openeditproperty = false;
var m_isGUIEditMode = false; //GUI編集モードかどうか
var m_deferOverwrite = false;//Statusメッセージを上書きしないよう制御する変数

var _colimitnum = 1000;   //チェックアウトの選択ファイル数上限
var _cilimitnum = 1000;   //チェックインの選択ファイル数上限

var _ctrlKey = false;
var _altKey = false;

window.addEventListener('keydown', function (e) {
    _ctrlKey = e.ctrlKey;
    _altKey = e.altKey;
}, true);
window.addEventListener('keyup', function (e) {
    _ctrlKey = e.ctrlKey;
    _altKey = e.altKey;
}, true);

function SetOpenEditBom(val) {
    var isReadOnlyFlg = document.getElementById("IsReadOnlyFlg"); //バグ111956対応
    if (isReadOnlyFlg && isReadOnlyFlg.value == "True") {
        m_openeditbom = false;
        return;
    }

    m_openeditbom = val;
}
function SetOpenEditProperty(val) {
    m_openeditproperty = val;
}

function GetMainWin() {
    return window.parent;
}

//
// サブミット
// (なんでか通らない) by nakamura
function Form_Submit() {
    // サブミットする
    document.getElementById("frmresult").submit();
}

function setDD3Visible(visible) {
    var dd3 = document.getElementById("DD3");
    if (dd3 == undefined) return;
    if (visible)
        dd3.style.visibility = "visible";
    else
        dd3.style.visibility = "hidden";
}

function SetSelectedAllFlag(val) {
    if (val) {
        $('#DD3').closest('tr').css('background-color', dd3acolor)
        //document.getElementById("SSS").bcolor = dd3acolor;
        //document.getElementById("SSS").fcolor = 0xffffff;
        m_selectedall = true;
    } else {
        $('#DD3').closest('tr').css('background-color', dd3bcolor)
        //document.getElementById("SSS").bcolor = dd3bcolor;
        //document.getElementById("SSS").fcolor = 0x111111;
        m_selectedall = false;
    }
}

function onDragging() {
    var w = window.parent;
    w.onDragging(event.clientX, "rightPane");
}

//	グリッドの列幅を変えたときのイベント

function flColSizeChange(gridName, ColID, Width) {
    var objGrid = document.getElementById(gridName);
    var objCol = document.getElementById(ColID);
    var a = new Array();
    var widthsVal = $('#Widths').val();
    var ColWidths;

    if (widthsVal != "not") {

        // 幅文字列を取得する

        ColWidths = widthsVal;

        // 配列化

        a = ColWidths.split("_");
        a[objCol.cellIndex - 1] = Width;

        // 文字列化

        ColWidths = a[0];
        for (var i = 1; i < a.length; i++) {
            ColWidths = ColWidths + "_" + a[i];
        }
        $('#Widths').val(ColWidths);

        //	DB更新
        var d = window.parent.frames["work"].document;
        d.getElementById("p_op").value = "SaveWidth";
        d.getElementById("p_args").value = ColWidths;
        d.getElementById("frm").submit();
    }
}
//	ステータスバー更新
function UpdateStatus(cnt, stat, deferOverwrite) {
    var sels = 0;
    if (cnt == -1) {
        cnt = 0;
        SetSelectedAllFlag(false);
        var fcount = document.getElementById("fcount");
        switch (ViewMode) {
            case 0:
                if (document.getElementById("fgResult") == undefined) {
                    cnt = 0;
                    stat = "t";
                } else {
                    var gs = igtbl_getGridById("fgResult");
                    sels = igtbl_getLength(gs.SelectedRows);
                    if (sels == 0) {
                        cnt = fcount.value - 0;
                        stat = "t";
                    } else {
                        cnt = sels;
                        stat = "s";
                    }
                }
                break;
            case 1:
            case 4:
                if (g_gdrows != null) {
                    for (var i = 0; i < g_gdrows.length; ++i)
                        if (g_gdrows[i] == true)
                            sels++;

                    if (sels == 0) {
                        cnt = fcount.value - 0;
                        stat = "t";
                    } else {
                        cnt = sels;
                        stat = "s";
                    }
                }
                break;
            case 5:
                if (undefined == document.getElementById("grid")) {
                    break;
                }
                var tbl = document.getElementById("grid").children[0];
                if (null == tbl) {
                    break;
                }
                if (g_gdrows == null) {
                    g_gdrows = new Array(tbl.rows.length);
                    for (var i = 0; i < g_gdrows.length; ++i)
                        g_gdrows[i] = false;
                }
                for (var i = 0; i < g_gdrows.length; ++i)
                    if (g_gdrows[i] == true)
                        sels++;

                if (sels == 0) {
                    cnt = fcount.value - 0;
                    stat = "t";
                } else {
                    cnt = sels;
                    stat = "s";
                }
                break;
            case 2:
            case 3:
                var li;
                var clv = document.getElementById("LLL");
                for (var n = 0; n < clv.listitems.count; n++) {
                    li = clv.listitems.item(n + 1);
                    if (li.selected) {
                        sels++;
                    }
                }
                if (sels == 0) {
                    cnt = fcount.value - 0;
                    stat = "t";
                } else {
                    cnt = sels;
                    stat = "s";
                }
                break;
        }
    }
    var msg;
    if (stat == "s") {
        if (m_selectedall) {
            msg = msgAllItemSelected.replace("$1", cnt);                // " すべて("+cnt+" 個)のオブジェクトを選択";
        } else {
            msg = msgItemSelected.replace("$1", cnt);                // " "+cnt+" 個のオブジェクトを選択";
            nFiles = cnt;
        }
    } else {
        if (cnt < 0) {
            cnt = -cnt;
            msg = msgItemExistOverLimit.replace("$1", cnt);      // " "+cnt+" 個のオブジェクト (検索結果の最大数を超えています)";
        } else
            msg = msgItemExist.replace("$1", cnt);               // " "+cnt+" 個のオブジェクト";
        nFiles = 0;
    }
    cancelEv();
    UpdateMessage(msg + $('#pno').val());
}
//	選択状態の解除
function ClearSelection() {
    var cnt = iv_click(null, "clear");
    UpdateStatus(-1, "t");
    return false;
}
//	マルチイメージの選択状態管理

function iv_click(dv, mode) {
    if (document.readyState != 'complete' && document.readyState != 'interactive') return -1;

    var tbl = document.getElementById(iv);
    if (tbl == null)
        return -1;

    var cell;
    var idx = 0;
    var cells = tbl.getElementsByTagName("div");
    if (g_gdrows == null) {
        g_gdrows = new Array(cells.length);
        for (var i = 0; i < g_gdrows.length; ++i) {
            g_gdrows[i] = false;
            if (cells[i] == dv) idx = i;
        }
    } else {
        for (var i = 0; i < cells.length; ++i)
            if (cells[i] == dv) {
                idx = i;
                break;
            }
    }

    var sels = 0;
    SetSelectedAllFlag(false);
    switch (mode) {
        case "set":
            for (var i = 0; i < g_gdrows.length; ++i) {
                if (i == idx) {
                    g_gdrows[i] = true;
                    cell = cells[i];
                    cell.style.backgroundColor = listcolbg;
                    cell.style.color = listcolfont;
                    $(cell).attr('data-sel', 'true');
                } else {
                    if (g_gdrows[i] == true) {
                    }
                    g_gdrows[i] = false;
                    cell = cells[i];
                    cell.style.backgroundColor = $(cell).attr('data-bg');
                    cell.style.color = "";
                    $(cells[i]).removeAttr('data-sel');
                }
            }
            sels = 1;
            g_gdpretr = idx;
            break;

        case "toggle":
            g_gdrows[idx] = !g_gdrows[idx];
            cell = cells[idx];
            if (g_gdrows[idx]) {
                cell.style.backgroundColor = listcolbg;
                cell.style.color = listcolfont;
                $(cell).attr('data-sel', 'true');
            } else {
                cell.style.backgroundColor = $(cell).attr('data-bg');
                cell.style.color = "";
                $(cell).removeAttr('data-sel');
            }
            sels = -1;
            g_gdpretr = idx;
            break;

        case "range":
            var f, t, cell;
            if (g_gdpretr < idx) {
                f = g_gdpretr;
                t = idx;
            } else {
                f = idx;
                t = g_gdpretr;
            }
            for (var i = 0; i < f; ++i) {
                if (g_gdrows[i] == true) {
                }
                g_gdrows[i] = false;
                cell = cells[i];
                cell.style.backgroundColor = $(cell).attr('data-bg');
                cell.style.color = "";
                $(cells[i]).removeAttr('data-sel');
            }
            for (var i = f; i <= t; ++i) {
                g_gdrows[i] = true;
                cell = cells[i];
                cell.style.backgroundColor = listcolbg;
                cell.style.color = listcolfont;
                $(cell).attr('data-sel', 'true');
                sels++;
            }
            for (var i = t + 1; i < g_gdrows.length; ++i) {
                if (g_gdrows[i] == true) {
                }
                g_gdrows[i] = false;
                cell = cells[i];
                cell.style.backgroundColor = $(cell).attr('data-bg');
                cell.style.color = "";
                $(cells[i]).removeAttr('data-sel');
            }
            break;

        case "clear":
            for (var i = 0; i < g_gdrows.length; ++i) {
                if (g_gdrows[i] == true) {
                }
                g_gdrows[i] = false;
                cell = cells[i];
                cell.style.backgroundColor = $(cell).attr('data-bg');
                cell.style.color = "";
                $(cells[i]).removeAttr('data-sel');
            }
            sels = 0;
            break;

        case "all":
            var fcount = document.getElementById("fcount");
            var cnt = fcount.value - 0;
            if (cnt == 0) return 0;
            SetSelectedAllFlag(true);
            if (cnt < 0) nFiles = -cnt;
            else nFiles = cnt;
            sels = nFiles;
            break;
    }
    if (window.event) {
        window.event.cancelBubble = true;
    }
    return sels;
}
//	グリッドのクリックイベント

function FileListClick(gridName, CellID, button) {
    event.preventDefault();
    UpdateStatus(-1, "t");
    if (button == 2) {
        // 右クリックならばメニューをポップアップ
        ShowMenu();
        return true;
    }
    // メニューを非表示にする
    cnfw_HideContextMenu();
}

var _tmr;
var _$mnu;
function ShowMenu() {
    clearTimeout(_tmr);
    var n = SaveSelectedFiles();
    $.ajax({
        url: "fwajaxproc.aspx",
        type: 'POST',
        async: false,
        data: {
            'cmd': 'createContextMenu',
            'selectedCount': n,
            'fids': $('#Fids').val(),
            'src':'filelist.aspx'
        },
        dataType: 'json',
        success: function (res) {
            if (res.error && res.error != "") {
                alert(res.error);
                return;
            }
            var menuHtml = res.data;
            if (menuHtml.length == 0) return;
            var $menu = $('#context').html(menuHtml);
            var x = event.clientX;
            var y = event.clientY;
            // TODO:
            $menu.show();
            var $ul = $('#mnu-context');
            $ul.menu({
                create: function () {
                    $widget = $(this).menu('widget');
                    $widget.css({
                        'outline': 'none'
                    });
                    var mh2 = $widget.height();
                    var mw2 = $widget.width();
                    var bodyHeight = $('body').height();
                    var bodyWidth = $('body').width();
                    if (y + mh2 > bodyHeight) {
                        y = bodyHeight - mh2;
                        if (y < 0) y = 0;
                    }
                    if (x + mw2 > bodyWidth) {
                        x = bodyWidth - mw2;
                        if (x < 0) x = 0;
                    }
                    $menu.offset({ left: x, top: y }).show();
                },
                focus: function (event, ui) {
                    clearTimeout(_tmr);
                    _$mnu = ui.item;
                },
                blur: function (event, ui) {
                    _tmr = setTimeout(cnfw_HideContextMenu, 200);
                    _$mnu = ui.item;
                },
                select: function (event, ui) {
                    _$mnu = ui.item;
                    event.preventDefault();
                    var url = $('a', _$mnu).attr('href');
                    if (url.length == 0) {
                        var $a = $('a', _$mnu);
                        url = "javascript:cnfw_MenuHandler2('" + $a.attr('data-key') + "','" + $a.attr('data-resid') + "')";
                    }
                    if (url == location.href + "#" || url == "#") {
                        url = "";
                    }
                    if (_$mnu.hasClass('ui-state-disabled')) {
                        url = "";
                    }
                    if (url.length > 0) {
                        cnfw_HideContextMenu();
                        try {
                            if(url == null || url.length == 0)
                                return;
                            var newUrl=url.toLowerCase();
                            if(newUrl.indexOf("javascript") != -1)
                                eval(url);
                            else 
                                windo.open(url, "_blank");
                        } 
                        catch (x) {
                        }
                    }
                    event.returnValue = false;
                    event.cancelBubble = true;
                    return false;
                }
            }).focus();
            $('li', $ul).on({
                'contextmenu': function () {
                    return false;
                },
                'mouseover': function () {
                    $(this).addClass('hover');
                },
                'mouseleave': function () {
                    $(this).removeClass('hover');
                }
            });
        }
    });
}

function cnfw_HideContextMenu() {
    var $ul = $('#mnu-context');
    $ul.hide();
}

function cnFwCommand(key) {
    switch (key) {
        case "mnuGet":  //ダウンロード...
            var fids = GetSelectedFids();
            if (fids == "") {
                return;
            }
            cancelEv();
            SelectedFileOp("GetFile", fids);
            break;

        case "mnuCheckOut":  //チェックアウト
            var fids = GetSelectedFids();
            if (fids == "") {
                return;
            }
            cancelEv();
            SelectedFileOp("CheckOutFile", fids);
            break;

        case "mnuCheckIn":  //チェックイン
            var fids = GetSelectedFids();
            if (fids == "") {
                return;
            }
            cancelEv();
            SelectedFileOp("CheckInFile", fids);
            break;

        case "mnuCancelCheckOut":  //チェックアウト取消
            var fids = GetSelectedFids();
            if (fids == "") {
                return;
            }
            cancelEv();
            SelectedFileOp("CancelCheckOut", fids);
            break;

        case "mnuProperty":  //書誌表示/編集
            var p = new Array();
            var l = cnfw_loadWinPosition("File", p);
            var param = "";
            if (event != null && event.shiftKey == true) {
                param = "&edit=true";
            }
            var w = window.open("fwcmd.aspx?u=File.aspx&fid=-1&n=1&wi=" + p[2] + param, "", "left=" + p[0] + ",top=" + p[1] + ",width=" + p[2] + ",height=" + p[3] + ",resizable=yes,dependent=yes,scrollbars=no,status=yes", true);
            if (w == undefined)
                return;
            if (window.parent != undefined) {
                var d = new Date();
                window.parent.AddWindow(w, "propwin" + d.toUTCString());
            }
            break;

        case "mnuRevList":  //履歴表示
            var fids = GetSelectedFids();
            if (fids == "") {
                return;
            }
            cancelEv();
            cnfw_ShowHistory(fids, window.parent);
            break;

        case "mnuSendToMark":  //マークへ
            var fids = GetSelectedFids();
            if (fids == "") {
                return;
            }
            cancelEv();
            var p = new Array();
            var l = cnfw_loadWinPosition("sendwork", p);
            w = window.open("fwcmd.aspx?u=sendwork.aspx", "sendwork", "left=" + p[0] + ",top=" + p[1] + ",width=480,height=400,resizable=yes,dependent=yes,status=yes", true);
            window.parent.AddWindow(w, "sendwork");
            break;

        case "mnuDelete":   //削除
            var fids = GetSelectedFids();
            if (fids == "") {
                return;
            }
            cancelEv();
            $('#btnDel').click();
            break;

        default:
            break;
    }
}

//	グリッドのテキストモード解除イベント

function beforeExitEditMode(gridName, cellID) {
    var cell;
    var grid;
    var strFileName;
    var bolNameStrErr = false;

    //get the cell	
    cell = igtbl_getCellById(cellID);
    //get the grid 
    grid = igtbl_getGridById(gridName);

    // ファイル名変更の場合は入力値を確認する

    if (cell.Column.Key == "FileName") {
        strFileName = cell.getValue();
        bolNameStrErr = !ChangeFileName(strFileName);
    }
    else {
        // 名前エラー表示なし

        nameErrorShow = false;

        //if the user has gotten this far then value is invlaid so return 1 to cancel the exiting of edit mode
        return 0;
    }

    // ファイル名入力エラーでかつ、エラー表示1回目のときはエラーを表示する
    if ((bolNameStrErr == true) && (nameErrorShow != true)) {
        nameErrorShow = true;		// 名前エラー表示中
        ShowAlertDialog('D130', msgInvalidFileNameChar + "\n \\/:*?\"<>|", msgInvalidFileNameCharTitle);    //"ファイル名に次の文字は使えません\n \\/:*?\"<>|", "ファイル名入力文字の確認"
    }

    // エラーがあったときはエディットモードを保持するなかったときはエディットモードを解除する
    if (bolNameStrErr == true) {

        // 名前エラー表示終わり

        nameErrorShow = false;

        //

        //if the user has gotten this far then value is invlaid so return 1 to cancel the exiting of edit mode
        return 1;
    }

}

function ChangeFileName(strFileName) {

    // ファイル名に使用できない文字が含まれるとき

    if ((strFileName.indexOf("\\") > -1) ||
		(strFileName.indexOf("/") > -1) ||
		(strFileName.indexOf(":") > -1) ||
		(strFileName.indexOf("*") > -1) ||
		(strFileName.indexOf("?") > -1) ||
		(strFileName.indexOf("\"") > -1) ||
		(strFileName.indexOf(">") > -1) ||
		(strFileName.indexOf("<") > -1) ||
		(strFileName.indexOf("|") > -1)) {

        // 名前エラー
        return false;
    }
    else {
        // work領域に新しいファイル名を格納する		
        var d = parent.frames["work"].document;
        if (d == null) {
            ShowAlertDialog('D144', errUnExpected);     //"コマンド実行で予期せぬエラー"
            return 0;
        }
        d.getElementById("p_FileName").value = encodeURIComponent(strFileName);

        // ファイル名変更コマンド発行

        SelectedFileOp("ChangeFileName");
        strSelFname = strFileName;

        // 名前エラー表示なし

        return true;
    }
}

//	リストが空の際のメニュー表示

function DivOnPopup() {
    if (document.readyState != 'complete') return false;

    //  ヘッダ右クリックなら表示カスタム
    var eSrc = window.event.srcElement;
    var th;
    while (null == th) {
        if (null == eSrc) break;
        switch (eSrc.tagName.toLowerCase()) {
            case "th":
                th = eSrc;
                break;
            default:
                eSrc = eSrc.parentElement;
                break;
        }
    }
    if (th) {
        ExecuteCommand("mnuView-CustomizeHeader");
        cancelEv();
        return false;
    }
    //  メニュー表示
    switch (ViewMode) {
        case 1:
        case 4:
            cell_Clicked(true);
            break;
        case 5:
            tbclick(true);
            break;
    }
    ShowMenu();
    return false;
}

//	マルチイメージのクリックイベント

function cell_Clicked(popup) {
    if (document.readyState != 'complete' && document.readyState != 'interactive') return false;

    var eSrc = window.event.srcElement;
    var tr;
    switch (eSrc.tagName.toLowerCase()) {
        case "nobr":
            tr = eSrc.parentElement.parentElement;
            break;
        case "p":
            tr = eSrc.parentElement;
            break;
        case "img":
            tr = eSrc.parentElement;
            break;
        case "div":
            tr = eSrc;
            if (tr.innerHTML == "") return false;
            if (tr.id.match(/bsviewer/)) return false;
            break;
        default:
            return false;
            break;
    }
    var dataBg = $(tr).attr('data-bg');
    if (dataBg == undefined) return false;
    var styleBg = tr.style.backgroundColor;
    if (styleBg == undefined) styleBg = "";
    if (popup == true && ($(tr).attr('data-sel')=="true" || m_selectedall)) {
        return false;
    }

    // 左クリックの処理

    var cnt;
    if (event.shiftKey)
        cnt = iv_click(tr, "range");
    else if (event.ctrlKey)
        cnt = iv_click(tr, "toggle");
    else {
        cnt = iv_click(tr, "set");
    }
    UpdateStatus(-1, "t");

    window.event.cancelBubble = true;
    window.event.returnValue = false;
}
// 選択行の fid とインデックスを変数に設定する

function SetSelectedInfo() {
    var cnt = 0;
    switch (ViewMode) {
        case 0:
            if (document.getElementById("fgResult") == undefined) {
                nSelIndex = -1;
                nSelFid = 0;
                cnt = 0;
                strSelFname = "";
            } else {
                var gs = igtbl_getGridById(gn);
                if (igtbl_getLength(gs.SelectedRows) > 0) {
                    for (id in gs.SelectedRows) {
                        r = igtbl_getRowById(id);
                        nSelIndex = r.getIndex();
                        nSelFid = r.getCell(0).getValue() - 0;
                        strSelFname = r.getCell(2).getValue();
                        break;
                    }
                    cnt = igtbl_getLength(gs.SelectedRows);
                    if (cnt >= 1) {
                        gs.setActiveRow(r)
                    }
                } else {
                    nSelIndex = -1;
                    nSelFid = 0;
                    cnt = 0;
                    strSelFname = "";
                }
            }
            return cnt;
            break;
        case 1:
        case 4:
            nSelIndex = -1;
            nSelFid = 0;
            if (g_gdrows != null) {
                var tbl = document.getElementById(iv);
                var cells = tbl.getElementsByTagName("div");
                for (var i = 0; i < g_gdrows.length; i++) {
                    if (g_gdrows[i]) {
                        nSelIndex = i;
                        nSelFid = cells[i].firstChild.value - 0;
                        strSelFname = cells[i].children[2].innerText;
                        cnt++;
                        if (cnt > 1)
                            return cnt;
                    }
                }
            }
            return cnt;
            break;
        case 5:
            nSelIndex = -1;
            nSelFid = 0;
            if (g_gdrows != null) {
                if (m_grid == undefined) m_grid = document.getElementById("grid");
                var tbl = m_grid.children[0];
                for (var i = 0; i < g_gdrows.length; i++) {
                    if (g_gdrows[i]) {
                        nSelIndex = i;
                        nSelFid = tbl.rows[i].cells[0].firstChild.nodeValue - 0;
                        strSelFname = tbl.rows[i].cells[2].innerText;
                        cnt++;
                        if (cnt > 1)
                            return cnt;
                    }
                }
            }
            return cnt;
            break;
        case 2:
        case 3:
            var li;
            var fid;
            nSelIndex = -1;
            nSelFid = 0;
            var clv = document.getElementById("LLL");
            for (var n = 0; n < clv.listitems.count; n++) {
                li = clv.listitems.item(n + 1);
                if (li.selected) {
                    nSelIndex = i;
                    nSelFid = li.tag - 0;
                    if (cnt > 1)
                        return cnt;
                }
            }
            return cnt;
            break;
    }
}
//	すべてのファイルを選択

function SelectAll() {
    switch (ViewMode) {
        case 0:
            if (document.getElementById("fgResult") != null) {
                var gs = igtbl_getGridById("fgResult");
                var oRows = gs.Rows;
                var cnt = oRows.length;
                var r;
                gs.noCellChange = false;			// 一つだけ選択しているとここがtrueになって全選択ができないので強制的にfalseにする　nakamura
                for (var i = 0; i < cnt; i++) {
                    r = oRows.getRow(i);
                    r.setSelected(true);
                }
            }
            if (cnt > 0) UpdateStatus(gs.Rows.length, "s");
            break;
        case 1:
        case 4:
            var cnt = iv_click(null, "all");
            if (cnt > 0) UpdateStatus(cnt, "s");
            break;
        case 5:
            var cnt = tr_click(null, 'all');
            if (cnt > 0) UpdateStatus(cnt, "s");
            break;
        case 2:
        case 3:
            var li;
            var clv = document.getElementById("LLL");
            for (var n = 0; n < clv.listitems.count; n++) {
                li = clv.listitems.item(n + 1);
                li.selected = true;
            }
            var bsv = document.getElementById("GGG");
            bsv.reload();
            UpdateStatus(clv.selectedcount, "s");
            break;
    }
    document.body.focus();
}
//	Postback 用選択ファイルの記憶
function SaveSelectedFiles() {
    if (document.readyState != 'complete' && document.readyState != 'interactive') return 0;
    var idx = 0;
    document.getElementById("Fids").value = "";

    if (nFiles == 0) return 0;

    var a = new Array();

    switch (ViewMode) {
        case 0:
            if (document.getElementById("fgResult") != undefined) {
                var gs = igtbl_getGridById("fgResult");
                var sRows = gs.SelectedRows;
                var selcnt = igtbl_getLength(sRows);
                var oRows = gs.Rows;
                var cnt = oRows.length;
                if (selcnt > 0 || m_selectedall) {
                    var r;
                    for (var i = 0; i < cnt; i++) {
                        r = oRows.getRow(i);
                        if (m_selectedall) {
                            strSelFname = r.getCell(2).getValue();
                            break;
                        }
                        if (r.getSelected()) {
                            a[idx++] = r.getCell(0).getValue();
                            strSelFname = r.getCell(2).getValue();
                            if (idx >= selcnt) break;
                        }
                    }
                }
            }
            break;
        case 1:
        case 4:
            if (g_gdrows != null) {
                var tbl = document.getElementById(iv);
                var cells = tbl.getElementsByTagName("div");
                for (var i = 0; i < g_gdrows.length; ++i) {
                    if (m_selectedall) {
                        strSelFname = cells[i].children[2].innerText;
                        break;
                    }
                    if (g_gdrows[i]) {
                        a[idx++] = cells[i].firstChild.value;
                        strSelFname = cells[i].children[2].innerText;
                    }
                }
            }
            break;
        case 5:
            if (g_gdrows != null) {
                var tbl = document.getElementById("grid").children[0];
                for (var i = 0; i < g_gdrows.length; ++i) {
                    if (m_selectedall) {
                        strSelFname = tbl.rows[i].cells[2].innerText;
                        break;
                    }
                    if (g_gdrows[i] == true) {
                        a[idx++] = tbl.rows[i].cells[0].firstChild.nodeValue;
                        strSelFname = tbl.rows[i].cells[2].innerText;
                    }
                }
            }
            break;
        case 2:
        case 3:
            var li;
            var fid;
            var clv = document.getElementById("LLL");
            for (var n = 0; n < clv.listitems.count; n++) {
                li = clv.listitems.item(n + 1);
                if (li.selected) {
                    a[idx++] = li.tag - 0;
                }
            }
            break;
    }
    if (m_selectedall) {
        document.getElementById("Fids").value = "ALL";
        return nFiles;
    } else {
        document.getElementById("Fids").value = a.join(",");
        return idx;
    }
}
//	承認機能のための選択情報保持
function SetSelectedInfoForApproval() {
    // 選択行の FID を取得して配列に格納しておく
    //オープンされたWindowsのJavaスクリプトが値を取りにくる。

    var n = 0;
    var fidstr = "";
    switch (ViewMode) {
        case 0:
            var rid, r;
            if (document.getElementById("fgResult") != undefined) {
                var gs = igtbl_getGridById("fgResult");
                for (rid in gs.SelectedRows)
                    if (gs.SelectedRows[rid]) {
                        r = igtbl_getRowById(rid);
                        fida[n] = r.getCell(0).getValue();
                        //fida[n] = r.cells[0].Element.innerText;
                        //namea[n] = r.cells[2].Element.innerText;
                        fidstr += fida[n] + ";"; //なぜかLISTBOXアイテムがサーバーコードからとれないのでテキストとして渡す

                        n++;
                    }
            }
            break;
        case 1:
        case 4:
            if (g_gdrows != null) {
                var tbl = document.getElementById(iv);
                var cells = tbl.getElementsByTagName("div");
                for (var i = 0; i < g_gdrows.length; ++i)
                    if (g_gdrows[i]) {
                        fida[n] = cells[i].firstChild.value;
                        fidstr += fida[n] + ";"; //なぜかLISTBOXアイテムがサーバーコードからとれないのでテキストとして渡す

                        n++;
                    }
            }
            break;

        case 5:
            if (g_gdrows != null) {
                var tbl = document.getElementById("grid").children[0];
                for (var i = 0; i < g_gdrows.length; ++i)
                    if (g_gdrows[i] == true) {
                        fida[n] = tbl.rows[i].cells[0].firstChild.nodeValue;
                        fidstr += fida[n] + ";"; //なぜかLISTBOXアイテムがサーバーコードからとれないのでテキストとして渡す

                        n++;
                    }
            }
            break;

        case 2:
        case 3:
            var li;
            var fid;
            var clv = document.getElementById("LLL");
            for (var n = 0; n < clv.listitems.count; n++) {
                li = clv.listitems.item(n + 1);
                if (li.selected) {
                    fida[n] = li.tag - 0;
                    namea[n] = li.text;
                    fidstr += fida[n] + ";"; //なぜかLISTBOXアイテムがサーバーコードからとれないのでテキストとして渡す

                    n++;
                }
            }
            break;
    }
    return fidstr;
}
function FileListDblClick(gridName, CellID, button) {
    if (event.shiftKey == true || event.ctrlKey == true)
        return true;

    SetSelectedInfo();
    if (nSelFid > 0)
        cnfw_ListDblClickHandler(nSelFid);
    return true;
}
function CellDblClick(cell) {
    if (event.shiftKey == true || event.ctrlKey == true)
        return true;

    SetSelectedInfo();
    if (nSelFid > 0)
        cnfw_ListDblClickHandler(nSelFid);
    return true;
}

//	ポップアップメニューのサブメニュー表示イベント

function mnuPopup_SubMenuDisplay(menuId, SubMenuId, bDisplay) {
    if ((bDisplay == true) && ((SubMenuId != "mnuPopup_MainM"))) {
        // 特に制御するメニューが無いので JudgeMnuItemDisable(SubMenuId);
    }
    return false;
}

//	ポップアップメニューのクリックイベント

function mnuPopup_ItemClick(menuId, itemId) {
    return WebMenuClick(menuId, itemId, null);
}
//  ポップアップメニューのチェックイベント

function mnuPopup_ItemChecked(menuId, itemId, bChecked) {
    return WebMenuClick(menuId, itemId, bChecked);
}
//  メニューの表示・非表示設定。recursiveをtrueにすると子孫メニューも連動する
function setMenuEnabledFlag(mnu, enabled, recursive) {
    var tag = mnu.getTag();
    var s = tag.split(",");
    var resid = s[1];
    if (!resid) return;

    try {
        $.ajax({
            url: "configmode.aspx",
            type: 'POST',
            async: false,
            data: {
                'setenabled': enabled,
                'resid': resid
            },
            dataType: "text",
            success: function (ret) {
            },
            error: function () {
            }
        });
    } catch (e) { }
    if (!recursive) return;

    //  子孫も設定
    var items = mnu.getItems();
    for (i = 0; i < items.length; i++) {
        var item = items[i];
        if (item.getChecked() != enabled) {
            setMenuEnabledFlag(item, enabled, true);
            item.setChecked(enabled);
        }
    }
}
//  メニューのクリック処理
function WebMenuClick(menuId, itemId, bChecked) {
    var mnu = igmenu_getItemById(itemId);
    var x = igmenu_getLeftPos(mnu.Element);
    var tag = mnu.getTag();
    var s = tag.split(",");
    var resid = s[1];
    if (m_isGUIEditMode && window.event != null && (window.event.clientX - 24 <= x)) {
        //GUI編集モードで、左端のチェックの位置をクリックした
        if (!resid) {
            //IDがセットされていないので何もしない。
            return true;
        }
        mnu.setChecked(!mnu.getChecked()); //    フラグの反転
        //  表示・非表示設定をAjax経由で呼び出し
        var url;
        if (mnu.getChecked()) {
            //  表示設定を行う
            setMenuEnabledFlag(mnu, true, false);
        } else {
            //  再帰的に非表示設定を行う
            setMenuEnabledFlag(mnu, false, true);
        }

        return true;//POST backしない                
    } else {
        if (m_isGUIEditMode && !mnu.getChecked()) {
            //  無効化されているコマンドなので何もしない
            return true;
        }
        if (resid && resid.indexOf("F005ME2") == 0) {
            //  直近のマーク設定
            SaveSelectedFiles();
            return
        }
        return cnfw_MenuHandler(menuId, itemId, resid);
    }
}

function ChangeViewMode(mode) {
    if (document.readyState != 'complete' && document.readyState != 'interactive') return;
    switch (mode) {
        case 1:
            SaveSelectedFiles();
            SetViewMode(document.getElementById("dmode").value);
            CommandPostback("view");
            return true;
            break;
        case 2:
            SaveSelectedFiles();
            SetViewMode(4);
            CommandPostback("view");
            return true;
            break;
        case 3:
            SaveSelectedFiles();
            SetViewMode(1);
            CommandPostback("view");
            return true;
            break;
        default:
            SaveSelectedFiles();
            SetViewMode(mode);
            CommandPostback("view");
            return true;
            break;
    }
}
function SetViewMode(mode) {
    if (document.readyState != 'complete' && document.readyState != 'interactive') return;
    var vm = document.getElementById("vmode");
    if (mode == undefined) {
        mode = vm.value;
    } else {
        vm.value = mode;
    }
    parent.g_viewmode = mode - 0;
    ViewMode = mode - 0;
}
//	選択ファイルに対する Postback コマンド実行

function SelectedFileOp(op) {
    var d = parent.frames["work"].document;
    if (d == null) {
        ShowAlertDialog('D145', errUnExpected);     //"コマンド実行で予期せぬエラー"
        return;
    }
    cancelEv();
    try {
        d.getElementById("p_op").value = op;
        d.getElementById("p_args").value = document.getElementById("Fids").value;
        d.getElementById("frm").submit();
    } catch (e) { }
}

function SendToRecentMark(path) {
    var d = parent.frames["work"].document;
    if (d == null) {
        ShowAlertDialog('D145', errUnExpected);     //"コマンド実行で予期せぬエラー"
        return;
    }
    cancelEv();
    try {
        d.getElementById("p_op").value = "sendToRecentMark";
        d.getElementById("p_markPath").value = path;
        d.getElementById("p_args").value = document.getElementById("Fids").value;
        d.getElementById("frm").submit();
    } catch (e) { }
}

//	work の再描画
function ReloadWork() {
    var d = parent.frames["work"].document;
    if (d == null) {
        ShowAlertDialog('D146', errUnExpected);     //"コマンド実行で予期せぬエラー"
        return;
    }
    d.location.href = "work.aspx";
}
//	チェックアウト状況ウィンドウを開く

function ShowCOList(resid) {
    var pw = window.parent;
    pw.ExecuteMenu("mnuCheckOutList", resid);
    return false;
}
// ポップアップイベントの表示を調整する
function JudgeMnuItemDisable(mnuParaID) {
    // グリッドの選択状態を取得

    var cnt = GetSelectedCount();

    // サブメニューの有効/無効切替え

    var item;
    var itemP = igmenu_getItemById(mnuParaID);
    if (itemP != null) {
        for (var index in itemP.getItems(0)) {
            item = itemP.getItems(0)[index];
            var tag = item.getTag();
            if (!tag) tag = "";
            var vc = tag.split(",");
            switch (vc[0]) {
                case "0":
                    item.setEnabled(true);
                    break;
                case "1":
                    if (cnt == 1) item.setEnabled(true);
                    else item.setEnabled(false);
                    break;
                case "2":
                    if (cnt > 0) item.setEnabled(true);
                    else item.setEnabled(false);
                    break;
                case "-2":
                    if (cnt <= 1) item.setEnabled(true);
                    else item.setEnabled(false);
                    break;
            }
            // 子メニューの確認もする
            if (item.getItems(0).length > 0) {
                JudgeMnuItemDisable(item.Id)
            }

        }
    }
}

//	リンク設定を行う
function cnfw_SetLink(type, a) {
    var lnk_win = top.lnk_win;
    var balive;
    if (lnk_win == undefined)
        balive = false;
    else
        if (lnk_win.closed)
            balive = false;
        else
            balive = true;

    if (balive) {
        //	既存の場合、AddFile を呼び出す

        lnk_win.AddFile(a, type);
        lnk_win.focus();
    } else {
        //	新規作成の場合

        lnk_a = a;
        lnk_type = type;
        var p = new Array();
        cnfw_loadWinPosition("setlink", p);
        top.lnk_win = window.open("setlink.aspx", "setlink", "left=" + p[0] + ",top=" + p[1] + ",width=770,height=260,dependent=yes", true);
        m_linkwintimerId = setInterval("AddLinkFile()", 100);
    }
}
function AddLinkFile() {
    if (top.lnk_win.document.readyState == 'complete' && top.lnk_win.AddFile) {
        top.lnk_win.AddFile(lnk_a, lnk_type);
        clearInterval(m_linkwintimerId);
    }
}

//	ワークフォルダへ送る
function SendWork() {
    var a = new Array();
    var idx = 0;
    switch (ViewMode) {
        case 0:
            if (document.getElementById("fgResult") != undefined) {
                var gs = igtbl_getGridById("fgResult");
                for (id in gs.SelectedRows) {
                    r = igtbl_getRowById(id);
                    a[idx++] = r.getCell(0).getValue() + "|" + r.getCell(2).getValue();
                }
            }
            break;

        case 5:
            var tbl = document.getElementById("grid").children[0];
            for (var i = 0; i < g_gdrows.length; ++i)
                if (g_gdrows[i] == true) {
                    a[idx++] = tbl.rows[i].cells[0].firstChild.nodeValue + "|" + tbl.rows[i].cells[2].innerText;
                }
            break;

        default:
            var tbl = document.getElementById(iv);
            var cells = tbl.getElementsByTagName("div");
            for (var i = 0; i < g_gdrows.length; ++i)
                if (g_gdrows[i]) {
                    a[idx++] = cells[i].firstChild.value + "|" + cells[i].children[2].innerText;
                }
            break;
    }
    if (idx == 0 && m_selectedall == false)
        return;

    var w = top.GetWindow("sendwork");
    var balive;
    if (w == undefined)
        balive = false;
    else
        if (w.closed)
            balive = false;
        else
            balive = true;

    if (balive) {
        //	既存の場合、一旦閉じる
        w.close();
    }

    sendwork_a = a;
    var p = new Array();
    var l = cnfw_loadWinPosition("sendwork", p);
    w = window.open("fwcmd.aspx?u=sendwork.aspx", "sendwork", "left=" + p[0] + ",top=" + p[1] + ",width=480,height=400,resizable=yes,dependent=yes,status=yes", true);
    top.AddWindow(w, "sendwork");
}

//
function XYZ() {

    event.srcElement.bcolor = 0x00d7ff;
    event.returnValue = false;
    event.dataTransfer.dropEffect = "copy";
    setTimeout("resumeColor()", 2000);
}
function resumeColor() {
    $("#DDBar").css('background-color', "");
}
function checkandwait() {
    var i;
    while (appwin.waitvalue != 555) {
        i = i;
    }
}
function checkandwait2() {
    var state = appwin.document.readyState;
    if (state == "complete") {
        appwin.focus();
        appwin.document.getElementById("Fidstr").innerText = fidstr;
        //appwin.document.getElementById("Fids").innerText = "Start";
        //appwin.document.getElementById("TextBox1").focus();
        //ファイルリストをこのSCRIPTから埋めるとVBコードで取得できません。

        //fida,namea配列で渡して、Approval.aspxのJavaScriptから埋めるようにしましたが

        //やはりVBコードから操作できないのは不便でした。

        //ということで、POSTBACKを一回発生させてVBコードでfidstrからリストを埋めました。

        appwin.document.getElementById("Form1").submit();
    }
}
function checkandwait3() {
    var state = appwin.document.readyState;
    if (state == "complete") {
        appwin.focus();
        appwin.document.getElementById("title").innerText = "...dummy"; //ValidateをOKにするため
        appwin.document.getElementById("Fidstr").innerText = fidstr;
        appwin.document.getElementById("Form1").submit();
    }
}
function init() {
    setWinSize();
    if (!cnfw_CheckDirectAccess())
        return;

    if (parent.g_keepconditionpane != true) {
        var showcond = parent.g_showcondition;
        parent.frames["condition"].document.location.replace("vfcondition.aspx?mode=view&showcond=" + showcond);
    }
    //parent.g_keepconditionpane = false;

    $('#Widths').val("");
    parent.g_searching = false;
    if (undefined != document.getElementById("SSS")) {
        parent.g_pc = "";
        //document.getElementById("SSS").bcolor = dd3bcolor;
        //document.getElementById("SSS").pcolor = dd3pcolor;
    }
    SetViewMode(parent.g_viewmode);
    parent.g_dmode = document.getElementById("dmode").value;
    m_dblclickcmd = document.getElementById("DblClickCommand").value;

    switch (ViewMode) {
        case 1:
        case 4:
            document.onselectstart = onselectstart;
            var tbl = document.getElementById(iv);
            if (tbl == null)
                return -1;

            var cell;
            var cells = tbl.getElementsByTagName("div");
            if (g_gdrows == null) {
                g_gdrows = new Array(cells.length);
                for (var i = 0; i < g_gdrows.length; ++i) {                
                    cell = cells[i];
                    if (cell.innerHTML == "") continue;
                    if ($(cell).attr('data-sel') == "true") {
                        g_gdrows[i] = true;
                    } else {
                        g_gdrows[i] = false;
                    }
                }
            }
            break;

        case 5:
            document.onselectstart = onselectstart;
            if (undefined == document.getElementById("grid"))
                return -1;
            var tbl = document.getElementById("grid").children[0];
            if (null == tbl)
                return -1;
            var tr;
            if (g_gdrows == null) {
                g_gdrows = new Array(tbl.rows.length);
                for (var i = 0; i < g_gdrows.length; ++i) {
                    tr = tbl.rows[i];
                    if ($(tr).attr('data-sel') == "true") {
                        g_gdrows[i] = true;
                    } else {
                        g_gdrows[i] = false;
                    }
                }
            }
            gdinit();
            break;
    }
    UpdateStatus(-1, "t");

    var btn = document.getElementById("foo");
    if (btn != null)
        initbsview();

    document.body.onload = "";
}
function setWinSize() {
    parent.g_mainwidth = document.body.clientWidth;
}
function GGG_Click() {
    var bsv = document.getElementById("GGG");
    switch (bsv.view) {
        case 0:
            SetViewMode(2);
            break;
        case 1:
            SetViewMode(3);
            break;
        case 4:
            SetViewMode(4);
            break;
    }
}
function cancelEv() {
    if (window.event != null) {
        window.event.returnValue = false;
        window.event.cancelBubble = true;
        window.event.preventDefault();
    }
}
window.document.onkeyup = function () {
    if (window.event.keyCode == m_lastUpDownKey) {
        //  高速化対応
        //  上下キー押下が解除されれば、高速状態(SyncScroll無効化)を解除する
        m_lastUpDownKey = 0;
    }
    if (window.event.ctrlKey) {
        switch (window.event.keyCode) {
            case 37: //	Ctrl+←
                moveto("p");
                break;

            case 39://	Ctrl+→
                moveto("n");
                break;

            default: //
                break;
        }
    }
}
window.document.onkeydown = function () {
    switch (window.event.keyCode) {
        case 40: // DOWNKEY
            if (window.event.ctrlKey) {
                moveto("e");
                return false;
            }
            //  高速化対応。上下キー押下の場合は、状態を覚えておく
            m_lastUpDownKey = window.event.keyCode;
            if (downone()) {
                window.event.returnValue = false;   //MORI
                window.event.cancelBubble = true;   //MORI
                return false;                             //MORI
            }
            break;
        case 38: // UPKEY
            if (window.event.ctrlKey) {
                moveto("t");
                return false;
            }
            //  高速化対応。上下キー押下の場合は、状態を覚えておく
            m_lastUpDownKey = window.event.keyCode;
            if (upone()) {
                window.event.returnValue = false;   //MORI
                window.event.cancelBubble = true;   //MORI
                return false;                             //MORI	 
            }
            break;
        case 112: //    F1
            if (window.event.ctrlKey) parent.cnfwonhelp();
            return;
        case 113: //	F2
            if (GetEnabled('F005ME1003')) {
                ExecuteCommand("mnuFile-Rename");
            }
            cancelEv();
            window.event.keyCode = 0;
            return;

        case 116: //	F5
            cancelEv();
            window.event.keyCode = 0;
            if (GetEnabled('F025BU1012')) {
                cnfw_UpdateMainList(window.parent);
            }
            return;

        case 46: //	DEL
            if (!GetEnabled('F005ME1005')) {
                cancelEv();
                window.event.keyCode = 0;
                return;
            }
            ExecuteCommand("mnuFile-Delete");
            cancelEv();
            window.event.keyCode = 0;
            return;

        case 27: //	ESC
            // メニューを非表示にする
            //var mnu = igmenu_getMenuById("mnuPopup");
            //if (mnu != undefined && mnu.getItems()[0])
            //    cnfw_igmenu_hideMenu(mnu.getItems()[0].Id);
            return;

        default:
    }

    if (window.event.ctrlKey) {
        switch (window.event.keyCode) {
            case 17:	//	Ctrl
                return;

            case 65:	//	Ctrl+A
                SelectAll();
                cancelEv();
                break;

            case 67:    //  Ctrl+C
                // Ctrl + Alt +C ：URLコピー
                if (window.event.altKey) {
                    cnfw_CopyURL();
                    return;
                }
            case 68:    //  Ctrl+D
                if (GetEnabled('F005ME1008')) {
                    ExecuteCommand("mnuTool-CancelApprove");
                    cancelEv();  // IE9では、お気に入りに追加画面が表示されるのでキャンセル
                    return false;
                }
                break;

            case 71:    //  Ctrl+G
                if (GetEnabled('F005ME1007')) {
                    ExecuteCommand("mnuTool-RequestApproval");
                    cancelEv();  // IE9では、フィードに追加画面が表示されるのでキャンセル
                    return false;
                }
                break;

            case 88:    //  Ctrl+X
                if (GetEnabled('F005ME1010')) {
                    ExecuteCommand("mnuFile-Send-WorkFolder");
                }
                break;

            case 89:    //  Ctrl+Y
                if (GetEnabled('F005ME1011')) {
                    ExecuteCommand("mnuFile-Send-RemoveFromWorkFolder");
                }
                break;

            case 37: //	Ctrl+←
                window.event.returnValue = false;   //ちょこっとスクロールするのを防ぐ
                return false;

            case 39: //	Ctrl+→
                window.event.returnValue = false;   //ちょこっとスクロールするのを防ぐ
                return false;

            default:
                var w = window.parent;
                return w.keyEvProc(window.event);
                break;
        }
    } else if (window.event.altKey) {
        switch (window.event.keyCode) {
            case 18:	//	Alt
                return;

            case 48:    //  Alt+0
            case 49:    //  Alt+1
            case 50:    //  Alt+2
            case 51:    //  Alt+3
            case 52:    //  Alt+4
            case 53:    //  Alt+5
            case 54:    //  Alt+6
            case 55:    //  Alt+7
            case 56:    //  Alt+8
            case 57:    //  Alt+9
            case 66:    //  Alt+B
            case 74:    //  Alt+J
            case 88:    //  Alt+X
            case 89:    //  Alt+Y
                var w = window.parent;
                w.keyEvProc(window.event);
                break;

            case 78:	//	Alt+N
                ShowMenu();
                cancelEv();
                window.event.keyCode = 0;
                break;

            default:
        }
    }
}
function moveto(cmd) {
    var p = document.getElementById("pageindex");
    var pIndex = p.value - 0;
    switch (cmd) {
        case "p":
            pIndex--;
            if (pIndex < 1) pIndex = 1;
            break;
        case "n":
            pIndex++;
            break;
        case "t":
            pIndex = 1;
            break;
        case "e":
            pIndex = 10000;
            break;
    }
    p.value = pIndex;
    CommandPostback("page");
}
function SetEntryForm(name) {
    parent.g_entryform = name;
}
//
//	FullWEB メインウィンドウのメニューハンドラ
//
function cnfw_MenuHandler(menuId, itemId, resid) {
    //	選択アイテムとそのキャプションを取得
    var item = igmenu_getItemById(itemId);
    //var cmdText = item.Element.innerText.replace("<U>", "").replace("</U>", "");
    var cmdText = item.getText();

    //	何も処理しないコマンドを先に処理
    if (item.getItems(0).length > 0) return true;

    // メニューを非表示にする
    cnfw_igmenu_hideMenu(itemId);

}

function cnfw_MenuHandler2(key, resid) {
    // メニューの処理。
    var cmd;
    switch (key) {
        case "mnuOpen":        //開く
            cmd = "mnuFile-Open";
            break;

        case "mnuGet":        //取り出し
            cmd = "mnuFile-Get";
            break;

        case "mnuRename":     //名前変更
            cmd = "mnuFile-Rename";
            break;

        case "mnuCheckOut":   //チェックアウト
            cmd = "mnuFile-COCI-CheckOut";
            break;

        case "mnuCheckIn":    //チェックイン
            cmd = "mnuFile-COCI-CheckIn";
            break;

        case "mnuCancelCheckOut": //チェックアウト取消
            cmd = "mnuFile-COCI-Cancel";
            break;

        case "mnuProperty":   //属性表示/編集
            cmd = "mnuFile-Property";
            break;

        case "mnuPermission": //権限設定
            cmd = "mnuTool-Permission";
            break;

        case "mnuSelectAll":  //すべて選択
            cmd = "mnuEdit-SelectAll";
            break;

        case "mnuRefresh":    //最新の情報に更新
            cmd = "mnuView-Refresh";
            break;

        case "mnuImageView":  //イメージ表示
            cmd = "mnuFile-ImageView";
            break;

        case "mnuArbitrarySizeImageView":  //イメージ表示（任意サイズ）
            cmd = "mnuFile-ArbitrarySizeImageView";
            break;

        case "mnuSendWork":   //ワークフォルダに送る
            cmd = "mnuFile-Send-WorkFolder";
            break;

        case "mnuRemoveFromWork": //ワークフォルダから外す
            cmd = "mnuFile-Send-RemoveFromWorkFolder";
            break;

        case "mnuApprovalRequest":    //承認依頼
            cmd = "mnuTool-RequestApproval";
            break;

        case "mnuCancelRequest":      //承認依頼取消
            cmd = "mnuTool-CancelApprove";
            break;

        case "mnuApprovalList":       //承認状況一覧
            cmd = "mnuTool-ApprovalList";
            break;

        case "mnuRouteSetting":       //部署内フロー設定
            cmd = "mnuTool-RouteSetting";
            break;

        case "mnuSetSub":             //代理設定
            cmd = "mnuTool-SetSub";
            break;

        case "mnuUpdateAppRoute":     //承認ルート変更
            cmd = "mnuTool-UpdateAppRoute";
            break;

        case "mnuDelete":     //削除
            cmd = "mnuFile-Delete";
            break;

        case "mnuDeleteAg":   //分類ラベル削除
            cmd = "mnuFile-DeleteAg";
            break;

        case "mnuShowMailNow":    //通知Now
            cmd = "mnuFile-MailNow";
            break;

        case "mnuShowChildLink":  //リンク表示(下へ)
            cmd = "mnuTool-Link-ShowChild";
            break;

        case "mnuShowParentLink": //リンク表示(上へ)
            cmd = "mnuTool-Link-ShowParent";
            break;

        case "mnuSetLinkParent":  //リンク元登録
            cmd = "mnuTool-Link-SetParent";
            break;

        case "mnuSetLinkChild":   //リンク先登録
            cmd = "mnuTool-Link-SetChild";
            break;

        case "mnuCustomizeHeader":    //表示項目のカスタマイズ
            cmd = "mnuView-CustomizeHeader";
            break;

        case "mnuBom":            //BOM
            cmd = "mnuTool-Bom-Child";
            break;

        case "mnuCheckOutList":   //チェックアウト状況
            cmd = "mnuTool-CoList";
            break;

        case "mnuExportCSV":  //CSV出力
            cmd = "mnuTool-CsvOutput";
            break;

        case "mnuImportCSV":  //CSV入力
            cmd = "mnuTool-CsvEntry";
            break;

        case "mnuAttachThumbnail":  //割り当て-サムネイル
            cmd = "mnuTool-Attach-Thumbnail";
            break;

        case "mnuAttachPDF":  //割り当て-PDF
            cmd = "mnuTool-Attach-PDF";
            break;

        case "mnuAttachStatus":  //割り当て-ステータス
            cmd = "mnuTool-Attach-Status";
            break;

        case "mnuMailList":   //メール通知一覧
            cmd = "mnuTool-MailList";
            break;

        case "mnuHelp":   //ヘルプ
            cmd = "mnuHelp";
            break;

        case "mnuAttrSearch": //属性検索
            cmd = "mnuAttrSearch";
            break;

        case "mnuFolderG":    //分類フォルダ
            cmd = "mnuFolderG";
            break;

        case "mnuFolderS":    //よく使う検索フォルダ
            cmd = "mnuFolderS";
            break;

        case "mnuFolderM":    //マークフォルダ
            cmd = "mnuFolderM";
            break;

        case "mnuRevList":    //履歴表示
            cmd = "mnuTool-RevisionList";
            break;

        case "mnuAutoNo":     //新規図番登録
            cmd = "mnuTool-Bom-AutoNo";
            break;

        case "mnuAccessLog":  //アクセスログ閲覧画面起動
            cmd = "mnuAccessLog";
            break;

        case "mnuCopyURL":  //URLをコピー
            cmd = "mnuCopyURL";
            break;

        default:
            if (key.indexOf("mnuSetRecent") == 0) {  //  直近のマーク設定
                SendToRecentMark(_$mnu.children("a").attr('title'));
            }
            return;
            break;
    }
    ExecuteCommandEx(cmd, resid);
}

//
//	コマンド実行

//
function ExecuteCommand(cmd) {
    ExecuteCommandEx(cmd, null);
}
function ExecuteCommandEx(cmd, resid) {
    // メニューの処理。return false の場合、Postback で処理する。

    switch (cmd) {
        case "mnuFile-CheckOutOrOpen":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;
            SelectedFileOp("CheckOutOrOpen");
            break;

        case "mnuFile-Open":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;
            SelectedFileOp("OpenFile");
            return;
            break;

        case "mnuFile-Get":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;
            SelectedFileOp("GetFile");
            return;
            break;

        case "mnuFile-Rename":
            SetSelectedInfo();
            nameErrorShow = false; 		// 名前エラー表示なし
            if (nSelIndex < 0) return; 	//POSTBACKしません。
            var n = SaveSelectedFiles();
            if (n != 1) return; //POSTBACKしません。

            if (0 == parent.g_viewmode) {
                var gs = igtbl_getGridById("fgResult");
                var r = igtbl_getRowById(gs.ActiveRow);
                var cell = r.getCellFromKey("FileName");
                igtbl_setActiveCell("fgResult", cell.Element);
                igtbl_EnterEditMode("fgResult");
                return;

            } else {
                var isReadOnlyFlg = document.getElementById("IsReadOnlyFlg"); //バグ111956対応
                if (isReadOnlyFlg && isReadOnlyFlg.value == "True") {
                    return;
                }
                var args = new Array();
                args[0] = msgInputNewFileName;
                var now = new Date();
                cnfwShowModalDialog("renamefile.aspx?fid=" + nSelFid + "&now=" + now.toLocaleTimeString(), args, "scroll:no;status:no;dialogWidth:480px;dialogHeight:120px", afterInputNewName);
                return;
            }
            break;

        case "mnuFile-COCI-CheckOut":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;

            //if (n >= _colimitnum) {
            //    var msg = errOverLimitForCoFmt.replace('$1', _colimitnum);
            //    ShowAlertDialog('D106', msg);
            //    return;
            //}
            SelectedFileOp("CheckOutFile");		// ワーク領域でファイルOpen処理をする
            return;
            break;

        case "mnuFile-COCI-CheckIn":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;

            //if (n >= _cilimitnum) {
            //    var msg = errOverLimitForCiFmt.replace('$1', _cilimitnum);
            //    ShowAlertDialog('D112', msg);
            //    return;
            //}
            SelectedFileOp("CheckInFile");
            return;
            break;

        case "mnuFile-COCI-Cancel":
            var n = SaveSelectedFiles();

            var msg;

            // ファイルが選択されているかチェックと削除時のメッセージ

            if (n == 0) {
                return;
            }
            else if (n == 1) {
                msg = msgConfirmCancelCO.replace("$1", strSelFname);    //"\"" + strSelFname + "\"のチェックアウトを取り消してもよろしいですか？"
            }
            else {
                msg = msgConfirmCancelCOMulti.replace("$1", n);         //"これらの" + n + "個のファイルのチェックアウトを取り消してもよろしいですか？"
            }
            parent.cnfwConfirm('D119', msg, msgConfirmCancelCOTitle, 3, 'confirm', null, CancelCheckOut);//"チェックアウト取り消しの確認"
            break;

        case "mnuFile-Property":
            var p = new Array();
            var l = cnfw_loadWinPosition("File", p);
            var param = "";
            if ((event != null && event.shiftKey == true) || m_openeditproperty == true) {
                param = "&edit=true";
            }
            var w = window.open("fwcmd.aspx?u=File.aspx&fid=-1&n=1&wi=" + p[2] + param, "", "left=" + p[0] + ",top=" + p[1] + ",width=" + p[2] + ",height=" + p[3] + ",resizable=yes,dependent=yes,scrollbars=no,status=yes", true);
            if (w == undefined)
                return;
            if (window.parent != undefined) {
                var d = new Date();
                window.parent.AddWindow(w, "propwin" + d.toUTCString());
            }
            break;

        case "mnuFile-Send-WorkFolder":
            SendWork();
            return;
            break;

        case "mnuFile-Send-RemoveFromWorkFolder":
            var n = SaveSelectedFiles();

            var msg;

            // ファイルが選択されているかチェックと削除時のメッセージ

            if (n == 0) {
                return;
            }
            var path = GetCurrentFolder().split("\\");
            switch (path[0]) {
                case StrFolderPersonalWork:
                case StrFolderSharedWork:
                    break; //ok
                default:
                    return;
            }
            var mark = path[path.length - 1];
            if (n == 1) {
                msg = msgConfirmRemoveFromWork.replace("$1", strSelFname).replace("$2", mark);  //"\"" + strSelFname + "\"をフォルダから除外してもよろしいですか？"
            }
            else {
                msg = msgConfirmRemoveFromWorkMulti.replace("$1", n).replace("$2", mark);       //"これらの" + n + "個のファイルをフォルダから除外してもよろしいですか？"
            }

            parent.cnfwConfirm('D120', msg, msgConfirmRemoveFromWorkTitle, 3, null, null, RemoveFromWorkFolder)//"フォルダからファイルを外す"
            break;

        case "mnuFile-MailNow":
            var w = window.open("fwcmd.aspx?u=mailset.aspx&selFlsKey=SelectedFiles", "_blank", "width=600,height=610,dependent=yes", true);
            if (w == undefined)
                return;
            if (window.parent != undefined) {
                var d = new Date();
                window.parent.AddWindow(w, "propwin" + d.toUTCString());
            }
            return;
            break;

        case "mnuTool-RevisionList":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;
            cnfw_ShowHistory(document.getElementById("Fids").value, window.parent);
            return;
            break;

        case "mnuTool-Permission":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;
            SelectedFileOp("SetFilePermission");
            return;
            break;

        case "mnuEdit-SelectAll":
            SelectAll();
            return;
            break;

        case "mnuView-Refresh":
            var n = SaveSelectedFiles();
            cnfw_UpdateMainList(window.parent);
            return;
            break;

        case "mnuFile-ImageView":
            SetSelectedInfo();
            if (nSelFid > 0) {
                cnfw_CreateLargeImage(nSelFid, window.parent);
            }
            return;
            break;

        case "mnuFile-ArbitrarySizeImageView":
            SetSelectedInfo();
            if (nSelFid > 0) {
                cnfw_ShowImageArbitrarySizeView(nSelFid, window.parent);
            }
            return;
            break;

        case "mnuTool-RequestApproval":
            if (document.getElementById("ro").value == "1") return;

            var n = SaveSelectedFiles();
            if (n == 0)
                return;

            SelectedFileOp("RequestApproval");
            return;
            break;

        case "mnuTool-CancelApprove":
            if (document.getElementById("ro").value == "1") return;

            var n = SaveSelectedFiles();
            if (n == 0)
                return;

            SelectedFileOp("CancelApprove");
            return;
            break;

        case "mnuTool-ApprovalList":
            var pw = window.parent;
            if (pw != undefined)
                pw.ExecuteMenu("mnuApprovalList", resid);
            return;  //POSTBACKしません。

        case "mnuTool-RouteSetting":
            if (document.getElementById("ro").value == "1") return;

            SetSelectedInfo();
            if (nSelFid > 0) {
                cnfw_RouteSetting(nSelFid, window.parent);
            }
            
            return;
            break;

        case "mnuTool-SetSub":
            cnfw_SetSub(window.parent);

            return;
            break;

        case "mnuTool-UpdateAppRoute":

            SetSelectedInfo();
            if (nSelFid > 0) {
                cnfw_UpdateAppRoute(nSelFid, window.parent);
            }
            return;
            break;

        case "mnuFile-Delete":
            var n = SaveSelectedFiles();

            // グリッドの選択状態を取得


            var msg;
            var fid = "";
            var mcapion;

            // ファイルが選択されているかチェックと削除時のメッセージ

            if (n == 0) {
                ShowAlertDialog('D132', msgNoFilesSelected, msgNoFilesSelectedTitle);
                return;
            }
            else if (n == 1) {
                msg = msgConfirmDeleteFile.replace("$1", "##fname##");
                mcapion = msgConfirmDeleteFileTitle;
                fid = document.getElementById("Fids").value;
            }
            else {
                msg = msgConfirmDeleteFileMulti.replace("$1", n);
                mcapion = msgConfirmDeleteFileMultiTitle;
            }
            cnfwConfirm('D121', msg, mcapion, 3, 'alert', fid, removeSelectedFile);
            return;
            break;

        case "mnuFile-DeleteAg":
            var agname = document.getElementById("agname");
            var n = SaveSelectedFiles();
            var msg;
            var mcapion;

            if (n == 0) {
                return;
            }
            if (n == 1) {
                msg = msgConfirmDeleteAg.replace("$1", strSelFname).replace("$2", agname.value);
                mcapion = msgConfirmDeleteAgTitle;
            }
            else {
                msg = msgConfirmDeleteAgMulti.replace("$1", n).replace("$2", agname.value);
                mcapion = msgConfirmDeleteAgTitle;
            }

            if (ShowConfirmDialog('D122', msg, mcapion, 3, 'alert')) {
                window.status = msgAgDeleting;
                return false;	// postback
            } else
                return;
            break;

        case "mnuTool-Link-ShowChild":
            SetSelectedInfo();
            if (nSelFid > 0)
                cnfw_ShowLinkView(nSelFid, "c", window.parent);
            return;
            break;

        case "mnuTool-Link-ShowParent":
            SetSelectedInfo();
            if (nSelFid > 0)
                cnfw_ShowLinkView(nSelFid, "p", window.parent);
            return;
            break;

        case "mnuTool-Link-SetParent":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;
            SelectedFileOp("SetLinkSrc");
            return;
            break;

        case "mnuTool-Link-SetChild":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;
            SelectedFileOp("SetLinkDest");
            return;
            break;

        case "mnuView-CustomizeHeader":
            var w;
            var pw = window.parent;
            if (pw != undefined) {
                w = pw.editcol_win;
                if (w != undefined) {
                    if (!w.closed) {
                        w.document.location.href = "editcol.aspx?fullpath=";
                        w.focus();
                        return false;
                    }
                }
            }
            var p = new Array();
            var l = cnfw_loadWinPosition("editcol", p);

            // 表示項目カスタマイズ選択画面を表示する	

            w = window.open("editcol.aspx?fullpath=", "_blank", "left=" + p[0] + ",top=" + p[1] + ",width=850,height=350,dependent=yes", true);
            if (pw != undefined)
                pw.editcol_win = w;
            return;
            break;

        case "mnuTool-Bom":
            var n = SaveSelectedFiles();
            SelectedFileOp("RestartBomEdit");
            return;
            break;

        case "mnuTool-Bom-Restart":
            SetSelectedInfo();
            document.getElementById("Fids").value = nSelFid;
            SelectedFileOp("RestartSelectedItemEdit");
            return;
            break;

        case "mnuTool-Bom-Root":
            SetSelectedInfo();
            if (window.event != null) SetOpenEditBom(window.event.shiftKey);
            cnfw_ShowBom(0, "c", window.parent, 1, false, m_openeditbom);
            return;
            break;

        case "mnuTool-Bom-Child":
            SetSelectedInfo();
            if (window.event != null) SetOpenEditBom(window.event.shiftKey);
            var PDMExpandLevelF = document.getElementById("PDMExpandLevelF");
            cnfw_ShowBom(":" + nSelFid, "c", window.parent, PDMExpandLevelF.value, false, m_openeditbom);
            return;
            break;

        case "mnuTool-Bom-Parent":
            SetSelectedInfo();
            if (window.event != null) SetOpenEditBom(window.event.shiftKey);
            var PDMExpandLevelB = document.getElementById("PDMExpandLevelB");
            cnfw_ShowBom(":" + nSelFid, "p", window.parent, PDMExpandLevelB.value, false, m_openeditbom);
            return;
            break;

        case "mnuTool-Bom-Seiban":
            SetSelectedInfo();
            if (window.event != null) SetOpenEditBom(window.event.shiftKey);
            var PDMExpandLevelF = document.getElementById("PDMExpandLevelF");
            cnfw_ShowBom(":" + nSelFid, "s", window.parent, PDMExpandLevelF.value, false, m_openeditbom);
            return;
            break;

        case "mnuTool-Bom-AttachedFiles":
            SetSelectedInfo();
            var PDMExpandLevelF = document.getElementById("PDMExpandLevelF");
            cnfw_ShowBom(":" + nSelFid, "a", window.parent, PDMExpandLevelF.value, false, true);
            return;
            break;

        case "mnuTool-Bom-CopyToBuffer":
            var n = SaveSelectedFiles();
            if (n == 0)
                return;
            SelectedFileOp("CopyToBomBuffer");
            return;
            break;

        case "mnuTool-Bom-RestartAll":
            document.getElementById("Fids").value = "RestartAll";
            SelectedFileOp("RestartBomEdit");
            return;
            break;

        case "mnuTool-CoList":
            ShowCOList(resid);
            return;
            break;

        case "mnuTool-CsvOutput":
            var n = SaveSelectedFiles();
            SelectedFileOp("GetCSV");
            return;
            break;

        case "mnuTool-CsvEntry":
            var w;
            var pw = window.parent;
            if (pw != undefined) {
                w = pw.GetWindow("csventry");
                if (w != undefined) {
                    if (!w.closed) {
                        w.document.location.href = "fwcmd.aspx?u=csventry.aspx";
                        w.focus();
                        return false;
                    }
                }
            }
            var initp = new Array();
            initp[0] = 0;
            initp[1] = 0;
            initp[2] = 810;
            initp[3] = 700;
            var p = new Array();
            var l = cnfw_loadWinPosition("csventry", p, initp);
            var param = "";
            w = window.open("fwcmd.aspx?u=csventry.aspx", "csventry", "left=" + p[0] + ",top=" + p[1] + ",width=" + p[2] + ",height=" + p[3] + ",resizable=yes,dependent=yes,scrollbars=no,status=yes", true);
            if (w == undefined)
                return;
            if (window.parent != undefined) {
                var d = new Date();
                window.parent.AddWindow(w, "csventry");
            }
            w.focus();
            return;
            break;

        case "mnuTool-MailList":
            ShowMailList("", resid);
            return;
            break;

        case "mnuTool-Option":
            cnfw_ShowOption(window.parent);
            return;
            break;

        case "mnuTool-Attach-Thumbnail":
            cnfw_Attach(window.parent, 0);
            return;
            break;

        case "mnuTool-Attach-PDF":
            cnfw_Attach(window.parent, 1);
            return;
            break;

        case "mnuTool-Attach-Status":
            SetSelectedInfo();
            if (nSelFid > 0) {
                cnfw_AttachStatus(window.parent, nSelFid);
            }
            return;
            break;

        case "mnuTool-Bom-AutoNo":
            SetSelectedInfo();
            if (nSelFid > 0) {
                SetAutoNoToFile();
            } else {
                var n = window.prompt(msgInputAutoNoCount, "1");
                if (n == null) return false;
                if (n == "") return false;
                n = ToNarrowNum(n);
                if (IsNumeric(n)) {
                    if (parseInt(n) > 0 && parseInt(n) < 1000000) EntryTitle(n);
                }
            }
            return;
            break;
        case "mnuHelp":
            top.ExecuteMenu("mnuHelp", resid);
            return;
            break;

        case "mnuAttrSearch":
            top.ExecuteMenu("mnuAttrSearch", resid);
            return;
            break;

        case "mnuFolderG":
            top.ExecuteFolderCommand("mnuFolderG");
            return;
            break;

        case "mnuFolderS":
            top.ExecuteFolderCommand("mnuFolderS");
            return;
            break;

        case "mnuFolderM":
            top.ExecuteFolderCommand("mnuFolderM");
            return;
            break;

        case "mnuAccessLog":
            var d = new Date();
            top.AddWindow(window.open("accesslog.aspx", "_blank", "resizable=yes,dependent=yes,scrollbars=no,status=yes", true), "accesslog" + d.toUTCString());

            return;
            break;

        case "mnuCopyURL":
            cnfw_CopyURL();
            return;
            break;

        case "mnuLayout":
            SetSelectedInfo();
            if (nSelFid > 0) {
                shFw_LayoutAttribute('mod');
            } else {
                shFw_LayoutAttribute('new');
            }
            
            return;
            break;

        case "mnuLayout-Mod":
            shFw_LayoutAttribute('mod');
            return;
            break;

        case "mnuLayout-New":
            shFw_LayoutAttribute('new');
            return;
            break;

        case "":
            return;
            break;
        default:
            return false;	// Postback
            break;
    }
}
function removeSelectedFile(returnValue, args) {
    if (returnValue) {
        window.status = msgFileDeleting;

        SelectedFileOp("DeleteFile");
        return;
    }
}
var __newFileName;
function afterInputNewName(returnValue, args) {
    var strFileName = args[1];
    var strOrgName = args[2];
    var istitle = args[3];
    if (strFileName == null) return;
    if (strFileName == "") return;
    if (strOrgName == strFileName) return;
    __newFileName = strFileName;

    var extOld = strOrgName.substring(strOrgName.lastIndexOf(".")).toLowerCase();
    var extNew = strFileName.substring(strFileName.lastIndexOf(".")).toLowerCase();
    if (extOld != extNew && istitle != 'true') {
        cnfwConfirm('D118', msgConfirmChangeExtension, msgConfirmChangeExtensionTitle, 3, 'alert', null, doRename);//"ファイルの拡張子を変更するとファイルが正常に開けなくなる可能性があります。\n続行しますか？", "名前変更の確認"
        return;
    }
    doRename(true, args);
}
function doRename(returnValue, args) {
    if (!returnValue) {
        returnl;
    }
    var strFileName = __newFileName;
    var bolNameStrErr = !ChangeFileName(strFileName);

    // ファイル名入力エラーでかつ、エラー表示1回目のときはエラーを表示する
    if ((bolNameStrErr == true) && (nameErrorShow != true)) {
        nameErrorShow = true; 	// 名前エラー表示中
        ShowAlertDialog('D131', msgInvalidFileNameChar + "\n \\/:*?\"<>|", msgInvalidFileNameCharTitle);    //"ファイル名に次の文字は使えません\n \\/:*?\"<>|", "ファイル名入力文字の確認"
    }
}
function CancelCheckOut(returnValue, args) {
    if (returnValue)
        SelectedFileOp("CancelCheckOut");
}
function RemoveFromWorkFolder(returnValue, args) {
    if (returnValue)
        SelectedFileOp("RemoveFromWorkFolder");
}

//
//	リストのダブルクリック
//
function cnfw_ListDblClickHandler(fid) {
    switch (m_dblclickcmd) {
        case "mnuFile-COCI-CheckOut":
            //if (GetEnabledList("mnuCheckOut,F005ME1032")[0] == "") return;
            ExecuteCommand("mnuFile-CheckOutOrOpen");
            break;
        case "mnuFile-Property":
            //if (GetEnabledList("mnuProperty,F005ME1002")[0] == "") return;
            ExecuteCommand(m_dblclickcmd);
            break;
        case "mnuFile-Open":
            //if (GetEnabledList("mnuOpen,F005ME1000")[0] == "") return;
            ExecuteCommand(m_dblclickcmd);
            break;
        case "mnuFile-Get":
            //if (GetEnabledList("mnuGet,F005ME1001")[0] == "") return;
            ExecuteCommand(m_dblclickcmd);
            break;
        default:
            ExecuteCommand(m_dblclickcmd);
            break;
    }
}

function GetSelectedFids() {
    SaveSelectedFiles();
    return document.getElementById("Fids").value;
}

function SetSelectedFids(fids) {
    document.getElementById("Fids").value = fids;
}

function GetSelectedFolderName() {
    return parent.g_activepath;
}

function GetSelectedCount() {
    return nFiles;
}

function gdinit() {
    if (undefined == document.getElementById("grid")) return true;

    document.getElementById("grid").scrollLeft = document.getElementById("scleft").value;
    return true; k
}
function SyncScroll() {
    if ($('#scleft').size() == 0) return;

    //  高速化対応。上下キーが押下されている状態なら、不要なスクロール同期処理は行わない
    if (m_lastUpDownKey == 0) {
        var grid = document.getElementById("grid");
        var hd = document.getElementById("ghd");
        hd.scrollLeft = grid.scrollLeft;
        var pos = hd.scrollLeft;
        //if (pos != grid.scrollLeft) grid.scrollLeft = pos;
        var scl = document.getElementById("scleft");
        scl.value = pos;
        var offset = -g_gdoffset - pos;
        g_gdoffset = -pos;
        var sep = document.getElementById("sep");
        var seps = sep.getElementsByTagName("div");
        for (var i = 0; i < seps.length; ++i) {
            seps[i].style.left = (seps[i].style.left.replace("px", "") - 0 + offset) + "px";
        }
    }
}
function thdown() {
    var eSrc = window.event.srcElement;
    switch (eSrc.className.toLowerCase()) {
        case "sep":
            g_gdobj = eSrc;
            g_gdobj.style.backgroundColor = "#ccf";
            g_gdobj.style.width = "1px";
            g_gdobj.style.height = "100vh";
            g_gddrag = true;
        default:
    }
}
function thmove() {
    if (!g_gddrag) return;
    if (g_gdobj == undefined) return;
    g_gdobj.style.left = event.clientX + 'px';
}
function thup() {
    /*
	*/
    var cl;
    if (g_gddrag) {
        var clt = '.' + g_gdobj.id;
        var w;
        var sepw = 8;
        var id;
        var offset = 0;
        var totalwidth = 0;
        var a = new Array();
        var idx = 0;
        var bUpdate = false;
        g_gdobj.style.backgroundColor = "transparent";
        g_gdobj.style.width = "8px";
        g_gdobj.style.height = "1em";
        for (var ss = 0; ss < document.styleSheets.length; ss++) {
            for (var sr = 0; sr < document.styleSheets[ss].rules.length; sr++) {
                cl = document.styleSheets[ss].rules[sr].selectorText;
                if (!cl) continue;
                var col = cl.match(/^\.c\d+/);
                if (null != col) {
                    bUpdate = true;
                    w = document.styleSheets[ss].rules[sr].style.width.replace("px", "") - 0;
                    if (cl == clt) {
                        offset = (g_gdobj.style.left.replace("px", "") - g_gdoffset - 8) - (totalwidth + w);
                        w += offset;
                        if (w < 5) {
                            w = 5
                        }
                        document.styleSheets[ss].rules[sr].style.width = w + "px";
                    }
                    if (0 < totalwidth)
                        a[idx++] = w;
                    totalwidth += (w + sepw);
                    id = cl.substring(1);
                    if (id != "c0")
                        document.getElementById(id).style.left = (g_gdoffset + totalwidth - 0) + "px";
                }
            }
        }
        if (bUpdate) {
            $('#Widths').val(a.join("_"));
            var d = window.parent.frames["work"].document;
            d.getElementById("p_op").value = "SaveWidth";
            d.getElementById("p_args").value = $('#Widths').val();
            d.getElementById("frm").submit();
        }
    }
    g_gddrag = false;
}
function tbdbl() {
    if (event.ctrlKey == true)
        return true;

    if (event.shiftKey == true) {
        SetOpenEditProperty(window.event.shiftKey);
    } else {
        SetOpenEditProperty(false);
    }

    SetSelectedInfo();
    if (nSelFid > 0)
        cnfw_ListDblClickHandler(nSelFid);
    return true;
}
function setColumnWidth(eSrc, dw) {
    var clt = '.' + eSrc.id;
    var w;
    var id;
    var offset = 0;
    var totalwidth = 0;
    for (ss = 0; ss < document.styleSheets.length; ss++) {
        for (sr = 0; sr < document.styleSheets[ss].rules.length; sr++) {
            cl = document.styleSheets[ss].rules[sr].selectorText;
            if (!cl) continue;
            var col = cl.match(/^\.c\d+/);
            if (null != col) {
                w = document.styleSheets[ss].rules[sr].style.width.replace("px", "") - 0;
                if (cl == clt) {
                    offset = dw - w;
                    w += offset;
                    if (w < 5) {
                        w = 5
                    }

                    eSrc.style.left = (g_gdoffset + totalwidth + w - 0) + "px";
                    document.styleSheets[ss].rules[sr].style.width = w + "px";
                }
                totalwidth += w;
                id = cl.substring(1);
                if (id != "c0")
                    document.getElementById(id).style.left = (g_gdoffset + totalwidth - 0) + "px";
            }
        }
    }

}
function navi() {
    switch (document.readyState) {
        case "uninitialized":
        case "loading":
        case "loaded":
            return false;
            break;
        default:
    }
    var eSrc = window.event.srcElement;
    var cmd;
    switch (eSrc.tagName.toLowerCase()) {
        case "span":
            cmd = eSrc.innerHTML;
            break;
        default:
            return false;
            break;
    }
    var p = document.getElementById("pageindex");
    var pIndex = p.value - 0;
    switch (cmd) {
        case "&lt;":
            pIndex--;
            break;
        case "&gt;":
            pIndex++;
            break;
        default:
            pIndex = cmd - 0;
            break;
    }
    p.value = pIndex;
    CommandPostback("page");
}
function thclick() {
    if (document.readyState != 'complete' && document.readyState != 'interactive') return;
    var eSrc = window.event.srcElement;
    var th;
    while (null == th) {
        if (null == eSrc) return false;
        switch (eSrc.tagName.toLowerCase()) {
            case "th":
                th = eSrc;
                break;
            default:
                eSrc = eSrc.parentElement;
                break;
        }
    }
    if (th.cellIndex > th.parentElement.cells.length - 2)
        return;

    var thcellIndex = th.cellIndex;
    if (_altKey) thcellIndex += "," + th.cellIndex;

    SaveSelectedFiles();
    var sc = document.getElementById("sortcol");
    if ("" == sc.value)
        sc.value = thcellIndex;
    else {
        if (event.shiftKey)
            sc.value = thcellIndex + "," + sc.value;
        else {
            if (sc.value == th.cellIndex)
                sc.value = thcellIndex + "," + sc.value;
            else
                sc.value = thcellIndex;
        }
    }
    CommandPostback("sort");
    //th_click(th.cellIndex);
}
function tbclick(popup) {
    if (document.readyState != 'complete' && document.readyState != 'interactive') return;
    var cnt;

    var eSrc = window.event.srcElement;
    var tagName = eSrc.tagName.toLowerCase();
    if (eSrc.id == "grid") tagName = "grid";
    var tr;
    switch (tagName) {
        case "nobr":
        case "div":
        case "p":
        case "img":
        case "td":
            tr = $(eSrc).closest('tr').get(0);
            break;
        case "tr":
            tr = eSrc;
            break;
        default:
            tr_click(null, "clear");
            UpdateStatus(-1, "t");
            return false;
            break;
    }

    if (popup == true && ($(tr).attr('data-sel')=="true" || m_selectedall)) {
        return false;
    }

    if (event.shiftKey)
        cnt = tr_click(tr, "range");
    else if (event.ctrlKey)
        cnt = tr_click(tr, "toggle");
    else {
        cnt = tr_click(tr, "set");
    }
    if (0 == cnt)
        UpdateStatus(-1, "t");
    else
        UpdateStatus(cnt, "s");
    return true;
}
function upone() //Test Function of MORI
{
    //  リスト表示以外なら、IEに任せる
    if (ViewMode != 5) {
        return false;
    }

    //  全選択時は、行のスクロールはしない
    if (m_selectedall)
        return false;

    //  変数状態チェック
    if (m_grid == undefined) m_grid = document.getElementById("grid");
    if (undefined == m_grid)
        return -1;
    var tbl = m_grid.children[0];
    if (null == tbl)
        return -1;

    if (g_gdrows == null) {
        g_gdrows = new Array(tbl.rows.length);
        for (var i = 0; i < g_gdrows.length; ++i)
            g_gdrows[i] = false;
    }

    //  先頭行ならスクロールしない
    if (g_gdpretr == 0)
        return false;

    //  選択状態をチェック。１行選択以外なら行のスクロールはしない
    if (SetSelectedInfo() != 1) {
        return false;
    }

    //  まず、前の行の選択状態を解除する
    if (g_gdrows[g_gdpretr] == true) {
        var rowstyle = tbl.rows[g_gdpretr].style;
        g_gdrows[g_gdpretr] = false;
        rowstyle.backgroundColor = $(tbl.rows[g_gdpretr]).attr('data-bg');
        rowstyle.color = "";
        $(tbl.rows[g_gdpretr]).removeAttr('data-sel');
    }

    //  続いて、次の行を選択状態にする
    var rows = tbl.rows[g_gdpretr - 1];
    g_gdrows[g_gdpretr - 1] = true;
    rows.style.backgroundColor = listcolbg;
    rows.style.color = listcolfont;
    $(rows).attr('data-sel', 'true');
    m_grid.scrollTop -= rows.scrollHeight;

    //  選択位置情報遷移
    g_gdpretr = g_gdpretr - 1;
    if (g_gdpretr < 0) {
        g_gdpretr = 0;
        return false;
    }

    return true;

}
function downone() //Test Function of MORI
{
    //  リスト表示以外なら、IEに任せる
    if (ViewMode != 5) {
        return false;
    }

    //  全選択時は、行のスクロールはしない
    if (m_selectedall)
        return false;

    //  変数状態チェック
    if (m_grid == undefined) m_grid = document.getElementById("grid");
    if (undefined == m_grid)
        return -1;
    var tbl = m_grid.children[0];
    if (null == tbl)
        return -1;

    if (g_gdrows == null) {
        g_gdrows = new Array(tbl.rows.length);
        for (var i = 0; i < g_gdrows.length; ++i)
            g_gdrows[i] = false;
    }

    //  最終行ならスクロールしない
    if (g_gdpretr + 1 >= g_gdrows.length)
        return false;

    //  選択状態をチェック。１行選択以外なら行のスクロールはしない
    if (SetSelectedInfo() != 1) {
        return false;
    }

    //  まず、前の行の選択状態を解除する
    if (g_gdrows[g_gdpretr] == true) {
        var rowstyle = tbl.rows[g_gdpretr].style;
        g_gdrows[g_gdpretr] = false;
        rowstyle.backgroundColor = $(tbl.rows[g_gdpretr]).attr('data-bg');
        rowstyle.color = "";
        $(tbl.rows[g_gdpretr]).removeAttr('data-sel');
    }

    //  続いて、次の行を選択状態にする
    var rows = tbl.rows[g_gdpretr + 1];
    g_gdrows[g_gdpretr + 1] = true;
    rows.style.backgroundColor = listcolbg;
    rows.style.color = listcolfont;
    $(rows).attr('data-sel', 'true');
    m_grid.scrollTop += rows.scrollHeight;

    //  選択位置情報遷移
    if (g_gdpretr + 1 >= g_gdrows.length) {
        return false;
    }
    g_gdpretr = g_gdpretr + 1;
    return true;

}
function tr_click(tr, mode) {
    if (undefined == document.getElementById("grid"))
        return -1;
    var tbl = document.getElementById("grid").children[0];
    if (null == tbl)
        return -1;

    if (g_gdrows == null) {
        g_gdrows = new Array(tbl.rows.length);
        for (var i = 0; i < g_gdrows.length; ++i)
            g_gdrows[i] = false;
    }

    var idx;
    var sels = 0;
    SetSelectedAllFlag(false);
    switch (mode) {
        case "set":
            idx = tr.rowIndex;
            for (var i = 0; i < g_gdrows.length; ++i) {
                if (i == idx) {
                    g_gdrows[i] = true;
                    tr.style.backgroundColor = listcolbg;
                    tr.style.color = listcolfont;
                    $(tr).attr('data-sel', 'true');
                } else {
                    if (g_gdrows[i] == true) {
                    }
                    g_gdrows[i] = false;
                    tbl.rows[i].style.backgroundColor = $(tbl.rows[i]).attr('data-bg');
                    tbl.rows[i].style.color = "";
                    $(tbl.rows[i]).removeAttr('data-sel');
                }
            }
            sels = 1;
            g_gdpretr = idx;
            break;

        case "toggle":
            idx = tr.rowIndex;
            g_gdrows[idx] = !g_gdrows[idx];
            if (g_gdrows[idx]) {
                tr.style.backgroundColor = listcolbg;
                tr.style.color = listcolfont;
                $(tr).attr('data-sel', 'true');
            } else {
                tr.style.backgroundColor = $(tr).attr('data-bg');
                tr.style.color = "";
                $(tr).removeAttr('data-sel');
            }
            sels = -1;
            g_gdpretr = idx;
            break;

        case "range":
            var f, t;
            idx = tr.rowIndex;
            if (g_gdpretr < idx) {
                f = g_gdpretr;
                t = idx;
            } else {
                f = idx;
                t = g_gdpretr;
            }
            for (var i = 0; i < f; ++i) {
                if (g_gdrows[i] == true) {
                }
                g_gdrows[i] = false;
                tbl.rows[i].style.backgroundColor = $(tbl.rows[i]).attr('data-bg');
                tbl.rows[i].style.color = "";
                $(tbl.rows[i]).removeAttr('data-sel');
            }
            for (var i = f; i <= t; ++i) {
                g_gdrows[i] = true;
                tbl.rows[i].style.backgroundColor = listcolbg;
                tbl.rows[i].style.color = listcolfont;
                $(tbl.rows[i]).attr('data-sel', 'true');
                sels++;
            }
            for (var i = t + 1; i < g_gdrows.length; ++i) {
                if (g_gdrows[i] == true) {
                }
                g_gdrows[i] = false;
                tbl.rows[i].style.backgroundColor = $(tbl.rows[i]).attr('data-bg');
                tbl.rows[i].style.color = "";
                $(tbl.rows[i]).removeAttr('data-sel');
            }
            break;

        case "clear":
            for (var i = 0; i < g_gdrows.length; ++i) {
                if (g_gdrows[i] == true) {
                }
                g_gdrows[i] = false;
                tbl.rows[i].style.backgroundColor = $(tbl.rows[i]).attr('data-bg');
                tbl.rows[i].style.color = "";
                $(tbl.rows[i]).removeAttr('data-sel');
            }
            sels = 0;
            break;

        case "all":
            var fcount = document.getElementById("fcount");
            var cnt = fcount.value - 0;
            if (cnt == 0) return 0;
            SetSelectedAllFlag(true);
            if (cnt < 0) nFiles = -cnt;
            else nFiles = cnt;
            sels = nFiles;
            break;
    }
    return sels;
}
function th_click(idx) {
    if (undefined == document.getElementById("grid"))
        return -1;
    var tbl = document.getElementById("grid").children[0];
    if (null == tbl)
        return -1;

    var trs = new Array(tbl.rows.length);
    for (var i = 0; i < trs.length; ++i)
        trs[i] = tbl.rows[i].cells[idx];

    if (idx != g_gdsortcol)
        trs.sort(colsortA);
    else {
        if (g_gdmode == "asc")
            trs.sort(colsortD);
        else
            trs.sort(colsortA);
    }
    g_gdsortcol = idx;

    var tbdy = tbl.getElementsByTagName("tbody")[0];
    for (var r = tbl.rows.length - 1; r >= 0; --r) {
        tbdy.insertBefore(trs[r].parentNode, tbdy.firstChild)
    }
}
function colsortA(a, b) {
    var x, y
    g_gdmode = "asc";
    if (a.abbr != "") {
        x = a.abbr - 0;
        y = b.abbr - 0;
    } else {
        x = a.innerText;
        y = b.innerText;
    }
    if (x > y)
        return 1;
    if (x < y)
        return -1;
    return 0;
}
function colsortD(a, b) {
    var x, y
    g_gdgdmode = "dsc";
    if (a.abbr != "") {
        x = a.abbr - 0;
        y = b.abbr - 0;
    } else {
        x = a.innerText;
        y = b.innerText;
    }
    if (x > y)
        return -1;
    if (x < y)
        return 1;
    return 0;
}
function UpdateMessage(msg, deferOverwrite) {
    if (m_deferOverwrite) {
        m_deferOverwrite = false;
        return;
    }
    if (deferOverwrite) {
        m_deferOverwrite = true;
    }
    $('#DD3').text(msg);
    //document.getElementById("DD3").fcolor = 0x111111;
    //document.getElementById("SSS").centerStr = msg;
    window.status = msg;
    if (msg.length == 0) {
        var f = parent.frames["contents"];
        if (f.document.getElementById("T_wt")) f.document.getElementById("T_wt").focus();
    }
}
function CommandPostback(cmd) {
    cancelEv();
    if (cmd == 'view') {
        switch (ViewMode) {
            case 1:
                if (!GetEnabled('F025BU1016')) {
                    return;
                }
                break;
            case 4:
                if (!GetEnabled('F025BU1015')) {
                    return;
                }
                break;
            case 5:
                if (!GetEnabled('F025BU1014')) {
                    return;
                }
            default:
                break;
        }

    }
    var op = document.getElementById("gdop");
    op.value = cmd;
    parent.g_keepconditionpane = true;
    document.getElementById("frmresult").submit();
}
function onselectstart() {
    return false;
}

//
//  新規図番登録
//
function SetAutoNoToFile() {
    var fids = GetSelectedFids();
    var fr = window.parent.frames["work"];
    fr.location.href = "cnautonowork.aspx?fid=" + fids;
}

//  work.aspx の参照を返す
function GetWorkFrameWindow() {
    return window.parent.frames["work"];
}

function DoAttrSearch(andor, condition) {
    parent.g_searching = true;
    var doc = parent.frames["work"].document;
    switch (andor) {
        case "or":
            doc.getElementById("p_op").value = "AttrOrSearch";
            break;
        default:
            doc.getElementById("p_op").value = "AttrAndSearch";
            break;
    }
    doc.getElementById("p_args").value = condition;
    doc.getElementById("frm").submit();
}

// URLコピー
function cnfw_CopyURL() {
    var max = 100;      // ファイル数制限
    var limit = 2000;   // URL文字列制限
    var errMsg = errOverFiles.replace(/(\$1)/, max);
    var n = SaveSelectedFiles();
    if (n > max) {
        ShowAlertDialog('D401', errMsg, msgCopyURLTitle);    //"ファイル数が多すぎます。\n$1件まで選択可能です。", "URLコピー"
        return;
    }
    var fid = document.getElementById("Fids").value;
    $.ajax({
        url: 'fwajaxproc.aspx',
        type: 'POST',
        async: false,
        data: {
            'cmd': 'CopyURL',
            'fid': fid
        },
        success: function (data, status) {
            _busy = false;
            if (data.data && data.data.length > 0) {
                var url = data.data;
                if (url.length > limit) {
                    ShowAlertDialog('D401', errMsg, msgCopyURLTitle);    //"ファイル数が多すぎます。\n$1件まで選択可能です。", "URLコピー"
                    return;
                }
                if (window.clipboardData) {
                    window.clipboardData.setData('Text', url); 
                } else {
                    $textarea = $('<textarea style="width:100px;height:100px;"></textarea>').text(url);
                    $textarea.appendTo('#clipWork').select();
                    document.execCommand('copy');
                    $textarea.remove();
                }
            }
        },
        dataType: 'json'
    });
}

function setForeground(clientSockId, title, pathname) {
    if (!frames['bomframe'].CallCnBomEditor) return;
    frames['bomframe'].setForeground(clientSockId, title, pathname);
}

function AddWindow(w, name) {
    try {
        top.AddWindow(w, name)
    } catch (e) {
        console.log(e.message);
    }
}

//  認識結果確認用
function wbrecogShowResult() {
    SetSelectedInfo();
    if (nSelFid <= 0) return;

    window.open("wbrecogShowResult.aspx?fid=" + nSelFid, "_blank", "width=900px, height=600px,resizable=yes");
}